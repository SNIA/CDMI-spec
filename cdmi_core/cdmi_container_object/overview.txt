
Overview
********

Container objects are the fundamental grouping of stored data within CDMIâ„¢ and are analogous to directories within a file system. Each container object has zero or more child objects and a set of well-defined fields that include standardized and optional metadata. The metadata is generated by the cloud storage system and specified by the cloud user.

Containers are addressed in CDMI in two ways:

* by name (e.g., http://cloud.example.com/container/); and
* by object ID (e.g.,http://cloud.example.com/cdmi_objectid/00007ED900104E1D14771DC67C27BF8B/).


Every container object has a single, globally-unique object ID that remains constant for the life of the object. Each container object may also have one or more URI addresses that allow the container object to be accessed. Following the URI conventions for hierarchical paths, container URIs shall consist of one or more container names that are separated by forward slashes ("/") and that end with a forward slash ("/"). 

If a request is performed against an existing container resource and the trailing slash at the end of the URI is omitted, the server shall respond with an HTTP status code of :numref:`ref_`301 Moved Permanently``. In addition, a Location header containing the URI with the trailing slash added shall be returned. 

If a CDMI request is performed to create a new container resource and the trailing slash at the end of the URI is omitted, the server shall respond with an HTTP status code of ``400 Bad Request``.

Non-CDMI requests to create a container resource shall include the trailing slash at the end of the URI; otherwise, the request shall be considered a request to create a data object.

Containers may also be nested. The following URI represents a nested container:

    http://cloud.example.com/container/subcontainer/

A nested container has a parent container object, shall be included in the children field of the parent container object, and shall inherit data system metadata and ACLs from its parent container. 

This model allows direct mapping between CDMI-managed cloud storage and file systems (e.g., NFSv4 or WebDAV). If a CDMI container object is exported as a file system, then the file system may make the CDMI metadata accessible via file system-specific mechanisms. As files and directories are created by the file system, they become visible through the CDMI interface acting as a data path. The mapping between file system constructs and CDMI data objects, container objects, and metadata is outside the scope of this international standard.

Individual fields within a container object may be accessed by specifying the field name after a question mark "?" appended to the end of the container object URI. 

The following URI returns just the children field in the response body:

    http://cloud.example.com/container/?children</P>

By specifying a range after the children field name, specific ranges of the children field may be accessed. 

    http://cloud.example.com/container/?children:0-2</P>

Children ranges are specified in a way that is similar to byte ranges as per Section 14.35.1 of :rfc:`2616`. A client can determine the number of children present by requesting the childrenrange field without requesting a range of children.

A list of fields, separated by a semicolon ";" may be specified, allowing multiple fields to be accessed in a single request. 

The following URI would return the children and metadata fields in the response body:

    http://cloud.example.com/container/?children;metadata

If read access to any of the requested fields is not permitted by the object ACL, only the permitted fields shall be returned. If no requested fields are permitted to be read, an HTTP status code of ``403 Forbidden`` shall be returned to the client. 

If write access to any of the requested fields is not permitted by the object ACL, no updates shall be performed, and an HTTP status code of ``403 Forbidden`` shall be returned to the client.

When a client includes deserialized fields that are not defined in this international standard, these fields shall be stored as part of the object.

Container Metadata
------------------

The following optional data system metadata may be provided (see :numref:`tbl_container_metadata`).

.. _tbl_container_metadata:

.. list-table:: Container Metadata
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Metadata Name
      - Type
      - Description
      - Requirement
    * - cdmi_assignedsize
      - JSON String
      - The number of bytes that is reported via exported protocols (e.g., the device may be thin provisioned). This number may limit cdmi_size.
      - Optional


Container metadata may also include arbitrary user-supplied metadata, storage system metadata, and data system metadata as described in `Metadata`.

Reserved Container Names
------------------------

This international standard defines reserved container names that shall not be used when creating new containers. These container names are reserved for use by this international standard, and if an attempt is made to create or delete them, an HTTP status code of :numref:`ref_`400 Bad Request`` shall be returned to the client. 

The reserved container names include: 

* cdmi_objectid, 
* cdmi_domains, 
* cdmi_capabilities, 
* cdmi_snapshots, and 
* cdmi_versions. 


As additional names may be added in future versions of this international standard, server implementations shall prevent the creation of user-defined containers if the container name starts with "cdmi_". 

Container Object Addressing
---------------------------

Each container object is addressed via one or more unique URIs, and all operations may be performed through any of these URIs. For example, a container object may be accessible via multiple virtual hosting paths, where http://cloud.example.com/users/snia/cdmi/ is also accessible through http://snia.example.com/cdmi/. Conflicting writes via different paths shall be managed the same way that conflicting writes via one path are managed, via the principle of eventual consistency (see `Create a Container Object using CDMI`).

Container Object Representations
--------------------------------

The representations in this clause are shown using JSON notation. Both clients and servers shall support UTF-8 JSON representation. The request and response body JSON fields may be specified or returned in any order, with the exception that, if present, for container objects, the childrenrange and children fields shall appear last and in that order. 