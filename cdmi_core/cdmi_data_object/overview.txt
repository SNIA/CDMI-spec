.. _ref_cdmi_data_object_overview:

Overview
********

Data objects are the fundamental storage component within CDMIâ„¢ and are analogous to files within a file system. Each data object has a set of well-defined fields that include: 

* a mandatory value,
* mandatory fields generated by the cloud storage system,
* mandatory metadata items generated by the cloud storage system,
* optional metadata generated by the cloud storage system; and 
* optional metadata specified by the cloud user.

Each CDMI data object is represented as a JSON object, containing one or more "fields". For example, the "``metadata``" field contains metadata items.

EXAMPLE 1: CDMI Data Object

	.. code-block:: json

		{
		    "objectType" : "application/cdmi-object",
		    "objectID" : "00007ED90010D891022876A8DE0BC0FD",
		    "objectName" : "MyDataObject.txt",
		    "parentURI" : "/MyContainer/",
		    "parentID" : "00007E7F00102E230ED82694DAA975D2",
		    "domainURI" : "/cdmi_domains/MyDomain/",
		    "capabilitiesURI" : "/cdmi_capabilities/dataobject/",
		    "completionStatus" : "Complete",
		    "mimetype" : "text/plain",
		    "metadata" : {
		        "cdmi_size" : "37"
		    },
		    "valuetransferencoding" : "utf-8",
		    "valuerange" : "0-36",
		    "value" : "This is the Value of this Data Object"
		}

The meaning, use, and permitted values of each field is described in each operation that creates, modifies or retreives CDMI data objects.

Data Object Addressing
----------------------

Data objects are addressed in CDMI in two ways: 

* by name (e.g. ``http://cloud.example.com/dataobject``); and
* by object ID (e.g. ``http://cloud.example.com/cdmi_objectid/00007ED90010D891022876A8DE0BC0FD``).

Every data object has a single, globally-unique object identifier (ID) that remains constant for the life of the object. Each data object shall have one or more URI addresses that allow the object to be accessed. 

Data Object Fields
------------------

Individual fields within a data object may be accessed by specifying the field name after a question mark "``?``" that is appended to the end of the data object URI. 

	EXAMPLE 2: The following URI returns the value field in the response body:

		``http://cloud.example.com/dataobject?value``

A list of unique fields, separated by a semicolon "``;``" may be specified, allowing multiple fields to be accessed in a single request. 

    EXAMPLE 3: The following URI returns the value and metadata fields in the response body:

        ``http://cloud.example.com/dataobject?value;metadata``

When a client provides fields that are not defined in this international standard or deserializes an object containing fields that are not defined in this international standard, these fields shall be stored as part of the object but shall not be interpreted.

Data Object Value
-----------------

The encoding of the data transported in the data object value field depends on the data object ``valuetransferencoding`` field.

* If the value transfer encoding of the object is set to "``utf-8``", the data stored in the value of the data object shall be a valid UTF-8 string and shall be transported as a UTF-8 string in the value field.
* If the value transfer encoding of the object is set to "``base64``", the data stored in the value of the data object can contain arbitrary binary sequences, and it shall be transported as a base 64-encoded string in the value field.

Specific ranges of the value of a data object may be accessed by specifying a byte range after the value field name. 

    EXAMPLE 4: The following URI returns the first thousand bytes in the value field:

        ``http://cloud.example.com/dataobject?value:0-999``

Because a byte range of a UTF-8 string is often not a valid UTF-8 string, the response to a range request shall always be transported in the value field as a base 64-encoded string. Likewise, when updating a range of bytes within the value of a data object, the contents of the value field shall be transported as a base 64-encoded string.

Byte ranges are specified as single inclusive byte ranges as per Section 14.35.1 of :rfc:`2616`.

The value of a data object may also be specified and retrieved using multi-part MIME, where the CDMI JSON is transferred in the first MIME part, and the raw object value is transferred in the second MIME part. Each MIME part, including any header fields, shall conform to :rfc:`2045`, :rfc:`2046`, and :rfc:`2616`. The length of each part may optionally be specified by a Content-Length header in addition to the MIME boundary delimiter.

Multiple non-overlapping ranges of the value of a data object may also be accessed or updated in a multi-part MIME operation by transferring one MIME part for each range of the value. The byte ranges for these operations shall be specified as per Section 14.35.1 of :rfc:`2616`.

Multi-part MIME enables the efficient transfer of binary data alongside CDMI object metadata without incurring the overhead of the UTF-8 or Base64 encoding and validation required to represent binary data in JSON.

Data Object Metadata
--------------------

Data object metadata may also include arbitrary user-supplied metadata, storage system metadata, and data system metadata, as specified in :numref:`Clause %s <clause_cdmi_metadata>`  Metadata shall be stored as a valid UTF-8 string. Binary data stored in user metadata shall be first encoded such that it can be contained in a UTF-8 string, with the use of base 64 encoding recommended.

Every data object has a parent object from which the data object inherits data system metadata that is not explicitly specified in the data object itself. 

    EXAMPLE 5: The "budget.xls" data object stored at the following URI would inherit data system metadata from its parent container, "finance":

        ``http://cloud.example.com/finance/budget.xls``

Data Object Access Control
--------------------------

If read access to any of the requested fields is not permitted by the object ACL, only the permitted fields shall be returned. If no requested fields are permitted to be read, an HTTP status code of ``403 Forbidden`` shall be returned to the client. 

If write access to any of the requested fields is not permitted by the object ACL, no updates shall be performed, and an HTTP status code of ``403 Forbidden`` shall be returned to the client.

Data Object Consistency
-----------------------

Writing to a data object is an atomic operation. 

* If a client reads a data object simultaneously with a write to that same data object, the reading client shall get either the old version or the new version, but not a mixture of both. 
* If a write is terminated due to errors, the contents of the data object shall be as if the write never occurred (i.e., writes are atomic in the face of errors). 

Create and update timestamps that are returned in response to multiple client writes to a given object may indicate that a specific write is the newest (i.e., the write whose data is expected to be returned to subsequent reads until another write is processed). However, there is no guarantee that the write with the latest timestamp is the one whose data is returned on subsequent reads.

Range writes can result in a gap in an object value that have had no data written to them. Reading from a gap in a data object value shall return zero for each byte read. 

Implementations of this international standard shall provide the atomicity features described in this subclause for data objects that are accessed via CDMI. The atomicity properties of data objects that are accessed by protocols other than CDMI are outside the scope of this international standard.

Data Object Representations
---------------------------

The representations in this clause are shown using JSON notation. Both clients and servers shall support UTF-8 JSON representation. The request and response body JSON fields may be specified or returned in any order, with the exception that, if present, for data objects, the "``valuerange``" and "``value``" fields shall appear last and in that order. 
