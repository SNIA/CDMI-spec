.. _ref_cdmi_data_object_update:

Update a Data Object using CDMI
*******************************

Synopsis
--------

To update an existing data object, the following requests shall be performed:

* ``PUT <root URI>/<ContainerName>/<DataObjectName>``
* ``PUT <root URI>/<ContainerName>/<DataObjectName>?value:<range>``
* ``PUT <root URI>/<ContainerName>/<DataObjectName>?metadata:<metadataname>;....``
* ``PUT <root URI>/cdmi_objectid/<DataObjectID>``
* ``PUT <root URI>/cdmi_objectid/<DataObjectID>?value:<range>``
* ``PUT <root URI>/cdmi_objectid/<DataObjectID>?metadata:<metadataname>;....``

Where:

* ``<root URI>`` is the path to the CDMI cloud.
* ``<ContainerName>`` is zero or more intermediate containers.
* ``<DataObjectName>`` is the name of the data object to be updated.
* ``<range>`` is a byte range for the data object value to be updated.
* ``<DataObjectID>`` is the ID of the data object to be updated.

Capabilities
------------

The following capabilities describe the supported operations that may be performed when updating an existing data object:

* Support for the ability to modify the metadata of an existing data object is indicated by the presence of the ``cdmi_modify_metadata`` capability in the specified object.
* Support for the ability to modify the value of an existing data object and/or MIME type is indicated by the presence of the ``cdmi_modify_value`` capability in the specified object.
* Support for the ability to modify the value of an existing data object in specified byte ranges is indicated by the presence of the ``cdmi_modify_value_range`` capability in the specified object.
* Support for the ability to modify an existing data object using multi-part MIME is indicated by the presence of the ``cdmi_multipart_mime`` system-wide capability.

Request Headers
---------------

The HTTP request headers for updating a CDMI data object using CDMI are shown in :numref:`tbl_cdmi_data_object_update_request_headers`. 

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.20}
                    |>{\raggedright\arraybackslash}\Y{0.10}
                    |>{\raggedright\arraybackslash}\Y{0.55}
                    |>{\raggedright\arraybackslash}\Y{0.15}|

.. _tbl_cdmi_data_object_update_request_headers:

.. list-table:: Request Headers - Update a CDMI Data Object using CDMI
    :header-rows: 1
    :align: center 

    * - Header
      - Type
      - Description
      - Requirement
    * - Content-Type
      - Header String
      - "``application/cdmi-object``" or "``multipart/mixed``"

        * If multipart/mixed is specified, the body shall consist of at least two MIME parts, where the first part shall contain a body of content-type "``application/cdmi-object``" and the second and subsequent parts shall contain one or more byte ranges of the value as described in Section 8.7. 
        * If multiple byte ranges are included and the "``Content-Range``" header is omitted for a part, the data in the part shall be appended to the data in the preceding part, with the first part having a byte offset of zero.
      - Mandatory
    * - X-CDMI-Partial
      - Header String
      - Indicates that the newly created object is part of a series of writes and has not yet been fully created. When set to "``true``", the ``completionStatus`` field shall be set to "``Processing``". ``X-CDMI-Partial`` works across CDMI and non-CDMI operations.
      
        .. raw:: latex

          \vspace*{1ex}

        If the completionStatus field had previously been set to "Processing" by including this header in a create or update, the next update without this field shall change the completionStatus field back to "Complete".
      - Optional


Request Message Body
--------------------

The request message body fields for updating a data object using CDMI are shown in :numref:`tbl_cdmi_data_object_update_request_message_body`.

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.20}
                    |>{\raggedright\arraybackslash}\Y{0.10}
                    |>{\raggedright\arraybackslash}\Y{0.55}
                    |>{\raggedright\arraybackslash}\Y{0.15}|

.. _tbl_cdmi_data_object_update_request_message_body:

.. list-table:: Request Message Body - Update a CDMI Data Object using CDMI
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Field Name
      - Type
      - Description
      - Requirement
    * - mimetype
      - JSON String
      - MIME type of the data contained within the value field of the data object. If present, this value replaces the existing mimetype field value.

        * This field may be included when updating by value, deserializing, and copying a data object.
        * If this field is not included, the existing value of the mimetype field shall be left unchanged.
        * This field shall be stored as part of the data object.
        * This mimetype field value shall be converted to lower case before being stored. 

		If this field is set to "``application/cms``" or "``application/jose+json``", the CDMI server shall encrypt or reencrypt the value of the object in place, using the key specified by the "``cdmi_enc_key_id``" metadata item. If the "``cdmi_enc_key_id``" metadata item is not present, the object ID shall be used as the key identifier. The mimetype of the plaintext shall be stored in the CMS or JWE JSON representation.

		If a "``cdmi_enc_value_sign_id``" metadata item is present, the encrypted object shall also be signed.

		If this field is changed from "``application/cms``" or "``application/jose+json``" to any other mimetype, the CDMI server shall decrypt the value of the object in place, replacing the specified mimetype with the mimetype of the encrypted object, if stored as part of the encrypted object.

		For more details on encrypted objects, see :numref:`clause %s <clause_cdmi_encrypted_objects>`.
      - Optional
    * - metadata
      - JSON Object
      - Metadata for the data object. If present, the new metadata specified replaces the existing object metadata. If individual metadata items are specified in the URI, only those items are replaced; other items are preserved.
        See :numref:`Clause %s <clause_cdmi_metadata>` for a further description of metadata.
      - Optional
    * - domainURI
      - JSON String
      - URI of the owning domain

        * If different from the parent domain, the user shall have the "``cross-domain``" privilege (see ``cdmi_member_privileges`` in :numref:`tbl_required_settings_for_domain_member_user_objects`).
        * If not specified, the existing domain shall be preserved.
      - Optional
    * - deserialize
      - JSON String
      - URI of a serialized CDMI data object that shall be deserialized to update an existing data object. The object ID of the serialized data object shall match the object ID of the destination data object.
      - Optional [#b]_
    * - copy
      - JSON String
      - URI of a source CDMI data object or queue object that shall be copied into an existing destination data object.

        * If the destination data object URI and the copy source object URI both do not specify individual fields, the destination data object shall be replaced with the source data object. 
        * If the destination data object URI or the copy source object URI specifies individual fields, only the fields specified shall be used to update the destination data object. If specified fields are not present in the source, these fields shall be ignored. 
        * If the destination data object URI and the copy source object URI both specify fields, an HTTP status code of ``400 Bad Request`` shall be returned to the client. 

        If the copy source object URI points to a queue object, as part of the copy operation, multiple queue values shall be concatenated into a single data object value.
      
        .. raw:: latex

          \vspace*{1ex}

        If there are insufficient permissions to read the data object at the source URI, update the data object at the destination URI, or if the read operation fails, the copy shall return an HTTP status code of ``400 Bad Request``, and the destination shall be left unchanged. 
      - Optional [#b]_
    * - deserializevalue
      - JSON String
      - A data object serialized as specified in :rfc:`4648`. The object ID of the serialized data object shall match the object ID of the destination data object.
      - Optional [#b]_
    * - valuetransferencoding
      - JSON String
      - The value transfer encoding used for the data object value. Three value transfer encodings are defined:

        * "``utf-8``" indicates that the data object contains a valid UTF-8 string and shall be transported as a UTF-8 string in the value field. If the contents of the data object value field are set or updated to any value other than a valid UTF-8 string, an HTTP status code of 400 Bad Request shall be returned to the client.
        * "``base64``" indicates that the data object may contain arbitrary binary sequence and shall be transported as a base 64 encoded string in the value field. Setting the contents of the data object value field to any value other than a valid base 64 string shall result in an HTTP status code of ``400 Bad Request`` being returned to the client.
        * "``json``" indicates that the data object contains a valid JSON object and shall be transported as a JSON object in the value field. If the contents of the data object value field are set or updated to any value other than a valid JSON object, an HTTP status code of 400 Bad Request shall be returned to the client.

        This field shall only be included when updating a data object by value.

        * If this field is not included and multi-part MIME is not being used, the existing value of "``valuetransferencoding``" shall be left unchanged.
        * If this field is not included and multi-part MIME is being used, the value of "``utf-8``" shall be assigned as the field value if the "``Content-Type``" header of the second and all subsequent MIME parts includes the charset parameter as defined in RFC 2046 of "``utf-8``" (e.g., "``;charset=utf-8``"). Otherwise, the value of "``base64``" shall be assigned as the field value. This field applies only to the encoding of the value when represented in JSON; the "``Content-Transfer-Encoding``" header of the part specifies the encoding of the value within a multi-part MIME request, as defined in RFC 2045.

        This field shall be stored as part of the object.
      - Optional
    * - value
      - JSON String
      - This field contains the new data for the object. If present, this value replaces the existing value.

        * If this field is not included and multi-part MIME is being used, the contents of the second and subsequent MIME parts shall be assigned to the corresponding byte ranges of the field value.
        * If the valuetransferencoding field indicates UTF-8 encoding, the value shall be a UTF-8 string escaped using the JSON escaping rules described in :rfc:`4627`.
        * If the valuetransferencoding field indicates base 64 encoding, the value shall be first encoded using the base 64 encoding rules described in :rfc:`4648`.
        * If the valuetransferencoding field indicates JSON encoding, the value field shall contain a valid JSON object.
        * If a value range was specified in the request, the new data shall be inserted at the location specified by the range. Any resulting gaps between ranges shall be treated as if zeros had been written and shall be included when calculating the size of the value. When storing a range, the value shall be encoded using base 64, and the valuetransferencoding field shall be set to "``base64``".
      - Optional [#b]_
	  

.. [#b] Only one of these fields shall be specified in any given operation. Except for value, these fields shall not be stored. If more than one of these fields is supplied, the server shall respond with an HTTP status code of ``400 Bad Request``.


Response Header
---------------

The HTTP response header for updating a data object using CDMI is shown in :numref:`tbl_cdmi_data_object_update_response_header`.

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.20}
                    |>{\raggedright\arraybackslash}\Y{0.10}
                    |>{\raggedright\arraybackslash}\Y{0.55}
                    |>{\raggedright\arraybackslash}\Y{0.15}|

.. _tbl_cdmi_data_object_update_response_header:

.. list-table:: Response Header - Update a CDMI Data Object using CDMI 
    :header-rows: 1
    :align: center 

    * - Header
      - Type
      - Description
      - Requirement
    * - Location
      - Header String
      - The server shall respond with the URI that the reference redirects to if the object is a reference.
      - Conditional


Response Message Body
---------------------

A response body may be provided as per :rfc:`2616`.



Response Status
---------------

The HTTP status codes that occur when updating a data object using CDMI are described in :numref:`tbl_cdmi_data_object_update_response_status`. 

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.30}
                    |>{\raggedright\arraybackslash}\Y{0.70}|

.. _tbl_cdmi_data_object_update_response_status:

.. list-table:: HTTP Status Codes - Update a CDMI Data Object using CDMI 
    :header-rows: 1
    :align: center 

    * - HTTP Status
      - Description
    * - ``204 No Content``
      - The data object content was returned in the response.
    * - ``302 Found``
      - The resource is a reference to another resource.
    * - ``400 Bad Request``
      - The request contains invalid parameters or field names.
    * - ``401 Unauthorized``
      - The authentication credentials are missing or invalid.
    * - ``403 Forbidden``
      - The client lacks the proper authorization to perform this request.
    * - ``404 Not Found``
      - The resource was not found at the specified URI.
    * - ``409 Conflict``
      - The operation conflicts with a non-CDMI access protocol lock or may cause a state transition error on the server.

Examples
--------

EXAMPLE 1: PUT to the data object URI to set new field values:

   .. code-block:: http

       PUT /MyContainer/MyDataObject.txt HTTP/1.1
       Host: cloud.example.com
       Content-Type: application/cdmi-object
       
       {
           "mimetype" : "text/plain",
           "metadata" : {
               "colour" : "blue",
               "length" : "10" 
           },
           "value" : "This is the Value of this Data Object"
       }

   The following shows the response.

   .. code-block:: http
   
       HTTP/1.1 204 No Content 


EXAMPLE 2: PUT to the data object URI to set a new MIME type:

   .. code-block:: http

       PUT /MyContainer/MyDataObject.txt?mimetype HTTP/1.1
       Host: cloud.example.com
       Content-Type: application/cdmi-object
       
       {
           "mimetype" : "text/plain"
       }

   The following shows the response.

   .. code-block:: http
       
       HTTP/1.1 204 No Content 


EXAMPLE 3: PUT to the data object URI to update a range of the value:

   .. code-block:: http

       PUT /MyContainer/MyDataObject.txt?value:21-24 HTTP/1.1
       Host: cloud.example.com
       Content-Type: application/cdmi-object
       
       {
           "value" : "dGhhdA=="
       }

   The following shows the response.

   .. code-block:: http
   
       HTTP/1.1 204 No Content

When updating a value without specifying a value transfer encoding, the client must be aware of the current value transfer encoding of the object. 

* If a client sends a value containing a UTF-8 string that is not a valid base 64 string to update an existing object with a value transfer encoding of "``base64``", the server shall return an error. 
* If a client sends a value containing a base 64 string to update an existing object with a value transfer encoding of "``utf-8``", the server shall not return an error. Instead, the server shall store the literal base 64 character sequence in the data object instead of the data encoded in the base 64 string.


EXAMPLE 4: PUT to the data object URI to replace all metadata with new metadata:

   .. code-block:: http

       PUT /MyContainer/MyDataObject.txt?metadata HTTP/1.1
       Host: cloud.example.com
       Content-Type: application/cdmi-object
       
       {
           "metadata" : {
               "colour" : "red",
               "number" : "7"
           }
       }

   The following shows the response.

   .. code-block:: http
   
       HTTP/1.1 204 No Content


EXAMPLE 5: PUT to the data object URI to add a new metadata item while preserving existing metadata:

   .. code-block:: http

       PUT /MyContainer/MyDataObject.txt?metadata:shape HTTP/1.1
       Host: cloud.example.com
       Content-Type: application/cdmi-object
       
       {
           "metadata" : {
               "shape" : "round"
           }
       }

   The following shows the response.

   .. code-block:: http
   
       HTTP/1.1 204 No Content


EXAMPLE 6: PUT to the data object URI to replace just one metadata item with a new value:

   .. code-block:: http

       PUT /MyContainer/MyDataObject.txt?metadata:colour HTTP/1.1
       Host: cloud.example.com
       Content-Type: application/cdmi-object
       
       {
           "metadata" : {
               "colour" : "green"
           }
       }

   The following shows the response.

   .. code-block:: http

       HTTP/1.1 204 No Content


EXAMPLE 7: Delete a single metadata item:

   .. code-block:: http

       PUT /MyContainer/MyDataObject.txt?metadata:colour HTTP/1.1 
       Host: cloud.example.com 
       Content-Type: application/cdmi-object 
       
       {
           "metadata": {}
       }

   The following shows the response. 

   .. code-block:: http
   
       HTTP/1.1 204 No Content


EXAMPLE 8: Add, update, and delete metadata items. Assume a starting condition where the object has a metadata item "colour" with value "green" and a metadata item "shape" with value "round" and does not have a metadata item "size". After the update, "colour" has value "red", "shape" is deleted, and "size" has been added with value "10". 

   .. code-block:: http

       PUT /MyContainer/MyDataObject.txt?metadata:colour;metadata:shape;metadata:size HTTP/1.1
       
       Host: cloud.example.com
       Content-Type: application/cdmi-object
       
       {
           "metadata": {
               "colour": "red",
               "size": "10"
           }
       }

   The following shows the response. 

   .. code-block:: http
   
    HTTP/1.1 204 No Content


EXAMPLE 9: PUT to the data object URI to set new field values and the binary contents using multi-part MIME:

   .. code-block:: http

       PUT /MyContainer/MyDataObject.txt HTTP/1.1 
       Host: cloud.example.com 
       Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08j34c0p
       
       --gc0p4Jq0M2Yt08j34c0p
       Content-Type: application/cdmi-object 
       
       {
        "metadata": {
            "colour": "red",
            "number": "7"
        }
       }
       
       --gc0p4Jq0M2Yt08j34c0p
       Content-Type: application/octet-stream
       Content-Transfer-Encoding: binary
       
       <37 bytes of binary data>
       
       --gc0p4Jq0M2Yt08j34c0p--


   The following shows the response.
   
   .. code-block:: http
   
       HTTP/1.1 204 No Content 


EXAMPLE 10: PUT to the data object URI to replace just one metadata item and update multiple byte ranges within the binary contents of the data object using multi-part MIME:

   .. code-block:: http

       PUT /MyContainer/BinaryObject.txt?metadata:colour HTTP/1.1 
       Host: cloud.example.com 
       Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08j34c0p
       
       --gc0p4Jq0M2Yt08j34c0p
       Content-Type: application/cdmi-object 
       
       {
        "metadata": {
            "colour": "green"
        }
       }
       
       --gc0p4Jq0M2Yt08j34c0p
       Content-Type: application/octet-stream
       Content-Range: bytes 0-10/37
       
       <11 bytes of binary data>
       
       --gc0p4Jq0M2Yt08j34c0p
       Content-Type: application/octet-stream
       Content-Range: bytes 21-24/37
       
       <4 bytes of binary data>
       
       --gc0p4Jq0M2Yt08j34c0p--

   The following shows the response.

   .. code-block:: http
   
       HTTP/1.1 204 No Content

       
       
EXAMPLE 11: PUT to the data object URI to encrypt an existing object:

    .. code-block:: http
   
        PUT /MyContainer/MyDataObject.txt HTTP/1.1
        Host: cloud.example.com
        Content-Type: application/cdmi-object

        {
         "mimetype" : "application/cms",
         "metadata" : {
         "cdmi_enc_key_id" : "testkey"
         }
        }

    The following shows the response:

    .. code-block:: http

        HTTP/1.1 204 No Content

EXAMPLE 12: PUT to the data object URI to decrypt an existing encrypted object:

    .. code-block: http
    
        PUT /MyContainer/MyEncryptedObject.txt HTTP/1.1
        Host: cloud.example.com
        Content-Type: application/cdmi-object

        {
         "mimetype" : "text/plain"
        }
        
    The following shows the response:

    .. code-block:: http
        
        HTTP/1.1 204 No Content