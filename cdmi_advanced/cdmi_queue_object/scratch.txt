
<DIV>

Queue Object Resource Operations using CDMI
========================================
<DIV>

Overview
************************

Queue objects provide first-in, first-out access when storing and retrieving data. A queue object writer POSTs data into a queue object, and a queue object reader GETs value(s) from the queue object and subsequently deletes the value(s) to acknowledge receipt of the value(s) that it received. Queuing provides a simple mechanism for one or more writers to send data to a single reader in a reliable way. If supported by the cloud storage system, cloud clients create the queue objects by using the mechanism described in `Create (POST) a New Queue Object using CDMI`_ and this clause.

Queue objects are addressed in CDMI™ in two ways:


* by name (e.g., http://cloud.example.com/queueobject); and
* by object ID (e.g., http://cloud.example.com/cdmi_objectid/00007ED900104F67307652BAC9A37C93/).


Every queue object has a single, globally-unique object identifier (ID) that remains constant for the life of the object. Each queue object shall have one or more URI addresses that allow the object to be accessed.  

A queue object may have a parent object. In this case, the queue object inherits data system metadata that is not explicitly specified in the queue object itself. 
<DIV>
#. The "receipts.queue" queue object stored at the following URI would inherit data system metadata from its parent container, "finance":

    .. code-block:: http


   http://cloud.example.com/finance/receipts.queue

Individual fields within a queue object may be accessed by specifying the field name after a question mark "?" that is appended to the end of the data object URI. 
</DIV>
<DIV>
#. The following URI returns the value field containing the oldest queue object value in the response body:

    .. code-block:: http


   http://cloud.example.com/queueobject?value

The encoding of the data transported in the queue object value field depends on the queue object valuetransferencoding field:


* If the value transfer encoding of the object is set to "utf-8", the data stored in the value of the queue object shall be a valid UTF-8 string, and it shall be transported as a UTF-8 string in the value field.
* If the value transfer encoding of the object is set to "base64", the data stored in the value of the queue object can contain arbitrary binary sequences, and it shall be transported as a base 64-encoded string in the value field.


Specific ranges of the value of a queue object may be accessed by specifying a byte range after the value field name. 
</DIV>
<DIV>
#. The following URI returns the first thousand bytes of the oldest value enqueued:

    .. code-block:: http


   http://cloud.example.com/queueobject?value:0-999

Because a byte range of a UTF-8 string is often not a valid UTF-8 string, the response to a range request shall always be transported in the value field as a base 64-encoded string.

Byte ranges are specified as single, inclusive byte ranges as per Section 14.35.1 of :rfc:`2616`.

If read access to any of the requested fields is not permitted by the object ACL, only the permitted fields shall be returned. If no requested fields are permitted to be read, an HTTP status code of ``403 Forbidden`` shall be returned to the client. 

If write access to any of the requested fields is not permitted by the object ACL, no updates shall be performed, and an HTTP status code of ``403 Forbidden`` shall be returned to the client.

When a client provides or includes deserialization fields that are not defined in this international standard, these fields shall be stored as part of the object.

The value of a queue object may also be specified and retrieved using multi-part MIME, where the CDMI JSON is transferred in the first MIME part and the raw queue values are transferred in the subsequent MIME parts. Each MIME part, including any header fields, shall conform to :rfc:`2045`, :rfc:`2046`, and :rfc:`2616`, and the length of each part may optionally be specified by a Content-Length header in addition to the MIME boundary delimiter.
</DIV>
<DIV>

Queue Object Metadata
-----

Queue object metadata may also include arbitrary user-supplied metadata, storage system metadata, and data system metadata, as specified in `Metadata`_
.
</DIV>
<DIV>

Queue Object Addressing
-----

Each queue object is addressed via one or more unique URIs, and all operations may be performed through any of these URIs. 
</DIV>
<DIV>

Queue Object Representations
-----

The representations in this clause are shown using JSON notation. Both clients and servers shall support UTF-8 JSON representation. The request and response body JSON fields may be specified or returned in any order, with the exception that, if present, for queue objects, the valuerange and value fields shall appear last and in that order. 
</DIV>
</DIV>
<DIV>

Create a Queue Object using CDMI
************************
<DIV>

Synopsis
-----

To create a new queue object, the following request shall be performed:

    PUT <root URI>/<ContainerName>/<QueueName>

To create a new queue object by ID, see `Create (POST) a New Queue Object using CDMI`_.
<DIV>
Where:


* <root URI> is the path to the CDMI cloud.
* <ContainerName> is zero or more intermediate containers that already exist, with one slash (i.e., "/") between each pair of container names.
* <QueueName> is the name specified for the queue object to be created.


After it is created, the object shall also be accessible at <root URI>/cdmi_objectid/<objectID>. 

The newly created queue shall have no values unless the queue is created as a result of copying or moving a source queue that has values or as a result of deserializing a serialized queue that has values.
</DIV>
</DIV>
<DIV>

Delayed Completion of Create 
-----

In response to a create operation for a queue object, the server may return an HTTP status code of ``202 Accepted``. In this case, the queue object is in the process of being created. This response is particularly useful for long-running operations, (e.g., for copying a queue object with a large number of enqueued values from a source URI). Such a response has the following implications:


* The server shall return a Location header with an absolute URI to the object to be created along with an HTTP status code of ``202 Accepted``.
* With an HTTP status code of ``202 Accepted``, the server implies that the following checks have passed:
<LI CLASS="Bullet-Indent">
user authorization for creating the queue object;</LI>
<LI CLASS="Bullet-Indent">
user authorization for read access to any source object for move, copy, serialize, or deserialize; and</LI>
<LI CLASS="Bullet-Indent">
availability of space to create the queue object or at least enough space to create a URI to report an error.</LI>
* A client might not be able to immediately access the created object, e.g., due to delays resulting from the implementation’s use of eventual consistency. 


The client performs GET operations to the URI to track the progress of the operation. In response, the server returns two fields in its response body to indicate progress.


* A completionStatus text field contains either "Processing", "Complete", or an error string starting with the value "Error".
* An optional percentComplete field contains the percentage that the accepted PUT has completed (0 to 100).


GET does not return any value for the object when completionStatus is not "Complete". When the final result of the create operation is an error, the URI is created with the completionStatus field set to the error message. It is the client's responsibility to delete the URI after the error has been noted. 
</DIV>
<DIV>


Capabilities 
-----

The following capabilities describe the supported operations that may be performed when creating a new queue object:


* Support for the ability to create a new queue object is indicated by the presence of the cdmi_create_queue capability in the parent container.
* If the object being created in the parent container is a reference, support for that ability is indicated by the presence of the cdmi_create_reference capability in the parent container.
* If the new queue object is a copy of an existing queue object, support for the ability to copy is indicated by the presence of the cdmi_copy_queue capability in the parent container.
* If the new queue object is the destination of a move, support for the ability to move the queue object is indicated by the presence of the cdmi_move_queue capability in the parent container.
* If the new queue object is the destination of a deserialize operation, support for the ability to deserialize the source data object is indicated by the presence of the cdmi_deserialize_queue capability in the parent container.

</DIV>
<DIV>


Request Headers
-----

The HTTP request headers for creating a CDMI queue object using CDMI are shown in `Request Headers - Create a Queue Object using CDMI`_. 


.. list-table::  tbl_Request Headers - Create a Queue Object using CDMI<A NAME="50532470_17973"></A>
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Header
      - Type
      - Description
      - Requirement
    * - Accept
      - Header String
      - "application/cdmi-queue" or a consistent value as per  per clause `Content-Type Negotiation`_
      - Mandatory
    * - Content-Type
      - Header String
      - "application/cdmi-queue"
      - Mandatory
    * - X-CDMI-Specification-Version
      - Header String
      - A comma-separated list of versions that the client supports, e.g., "1.1, 1.5, 2.0"
      - Mandatory

</DIV>
<DIV>


Request Message Body
-----

The request message body fields for creating a queue object using CDMI are shown in `Request Message Body - Create a Queue Object using CDMI`_.


.. list-table::  tbl_<A NAME="50532470_16565"></A>Request Message Body - Create a Queue Object using CDMI  (Sheet 1 of 2)
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Field Name
      - Type
      - Description
      - Requirement
    * - metadata
      - JSON Object
      - Metadata for the queue object


        * If this field is included when deserializing, serializing, copying, or moving a queue object, the value provided in this field shall replace the metadata from the source URI. 
        * If this field is not included when deserializing, serializing, copying, or moving a queue object, the metadata from the source URI shall be used. 
        * If this field is included when creating a new queue object by specifying a value, the value provided in this field shall be used as the metadata. 
        * If this field is not included when creating a new queue object by specifying a value, an empty JSON object (i.e., "{}") shall be assigned as the field value. 
        * This field shall not be included when referencing a queue object. 

      - Optional
    * - domainURI
      - JSON String
      - URI of the owning domain


        * If different from the parent domain, the user shall have the "cross_domain" privilege (see cdmi_member_privileges in `Required Settings for Domain Member User Objects`_).
        * If not specified, the parent domain shall be used.

      - Optional
    * - deserialize
      - JSON String
      - URI of a serialized CDMI data object that shall be deserialized to create the new queue object
      - Optional [#a]_
    * - copy
      - JSON String
      - URI of a source CDMI queue object that shall be copied into the new destination queue object. 


        * If the destination queue object URI and the copy source queue object URI both do not specify individual fields, the destination queue object shall be a complete copy of the source queue object, including all enqueued values. 
        * If the destination queue object URI or the copy source queue object URI specifies individual fields, only the fields specified shall be used to create the destination queue object. If specified fields are not present in the source, default field values shall be used. 
        * If the destination queue object URI and the copy source queue object URI both specify fields, an HTTP status code of ``400 Bad Request``
 shall be returned to the client. 

If there are insufficient permissions to read the queue object at the source URI or create the queue object at the destination URI, or if the read operation fails, the copy shall return an HTTP status code of ``400 Bad Request``
, and the destination queue object shall not be created.
      - Optional [#a]_
    * - move
      - JSON String
      - URI of an existing local or remote CDMI queue object (source URI) that shall be relocated to the URI specified in the PUT. The contents of the queue object, including the object ID, shall be preserved by a move, and the queue object at the source URI shall be removed after the queue object at the destination has been successfully created. 
If there are insufficient permissions to read the queue object at the source URI, write the queue object at the destination URI, or delete the queue object at the source URI, or if any of these operations fail, the move shall return an HTTP status code of ``400 Bad Request``
, and the source and destination are left unchanged.
      - Optional [#a]_
    * - reference
      - JSON String
      - URI of a CDMI queue object that shall be redirected to by a reference. If other fields are supplied when creating a reference, the server shall respond with an HTTP status code of ``400 Bad Request``
.
      - Optional [#a]_
    * - deserializevalue
      - JSON String
      - A queue object serialized as specified in :rfc:`4648`.
      - Optional [#a]_
    * <TH ROWSPAN="1" COLSPAN="4">
aOnly one of these fields shall be specified in any given operation. Except for value, these fields shall not be stored. If more than one of these fields is supplied, the server shall respond with an HTTP status code of ``400 Bad Request``
.

</DIV>
<DIV>

Response Headers
-----

The HTTP response headers for creating a CDMI queue object using CDMI are shown in `Response Headers - Create a Queue Object using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_24226"></A>Response Headers - Create a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Header
      - Type
      - Description
      - Requirement
    * - Content-Type
      - Header String
      - "application/cdmi-queue"
      - Mandatory
    * - X-CDMI-Specification-Version
      - Header String 
      - The server shall respond with the highest version supported by both the client and the server, e.g., "1.1".
If the server does not support any of the versions that the client supports, the server shall return an HTTP status code of ``400 Bad Request``
.
      - Mandatory
    * - Location
      - Header String
      - When an HTTP status code of ``202 Accepted ``
is returned, the server shall respond with the absolute URL of the object that is in the process of being created.
      - Conditional

</DIV>
<DIV>

Response Message Body
-----

The response message body fields for creating a CDMI queue object using CDMI are shown in `Response Message Body - Create a Queue Object using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_92285"></A>Response Message Body - Create a Queue Object using CDMI (Sheet 1 of 2)
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Field Name
      - Type
      - Description
      - Requirement
    * - objectType
      - JSON String
      - "application/cdmi-queue"
      - Mandatory
    * - objectID
      - JSON String
      - Object ID of the object
      - Mandatory
    * - objectName
      - JSON String
      - Name of the object
      - Mandatory
    * - parentURI
      - JSON String
      - URI for the parent object
Appending the objectName to the parentURI shall always produce a valid URI for the object. 
      - Mandatory
    * - parentID
      - JSON String
      - Object ID of the parent container object
      - Mandatory
    * - domainURI
      - JSON String
      - URI of the owning domain.
      - Mandatory
    * - capabilitiesURI
      - JSON String
      - URI to the capabilities for the object
      - Mandatory
    * - completionStatus
      - JSON String
      - A string indicating if the object is still in the process of being created or updated by another operation, and after that operation is complete, indicates if it was successfully created or updated or if an error occurred.
The value shall be the string "Processing", the string "Complete", or an error string starting with the value "Error".
      - Mandatory
    * - percentComplete
      - JSON String
      - 

        * When the value of completionStatus is "Processing", this field, if provided, shall indicate the percentage of completion as a numeric integer value from 0 through 100. 
        * When the value of completionStatus is "Complete", this field, if provided, shall contain the value "100". 
        * When the value of completionStatus is "Error", this field, if provided, may contain any integer value from 0 through 100. 

      - Optional
    * - metadata
      - JSON Object
      - Metadata for the queue object. This field includes any user and data system metadata specified in the request body metadata field, along with storage system metadata generated by the cloud storage system. See `Metadata`_ for a further description of metadata.
      - Mandatory
    * - queueValues
      - JSON String
      - The range of designators for enqueued values. Every enqueued value shall be assigned a unique, monotonically-incrementing positive integer designator, starting from 0. If no values are enqueued, an empty string shall be returned. If values are enqueued, the lowest designator, followed by a hyphen ("-"), followed by the highest designator shall be returned.
      - Mandatory

</DIV>
<DIV>

Response Status
-----

`HTTP Status Codes - Create a Queue Object using CDMI`_ describes the HTTP status codes that occur when creating a queue object using CDMI. 


.. list-table::  tbl_<A NAME="50532470_39760"></A>HTTP Status Codes - Create a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - HTTP Status
      - Description
    * - ``201 Created``

      - The new queue object was created.
    * - ``202 Accepted``

      - The queue object is in the process of being created. The CDMI client should monitor the completionStatus and percentComplete fields to determine the current status of the operation.
    * - ``400 Bad Request``

      - The request contains invalid parameters or field names.
    * - ``401 Unauthorized``

      - The authentication credentials are missing or invalid.
    * - ``403 Forbidden``

      - The client lacks the proper authorization to perform this request.
    * - ``404 Not Found``

      - The resource was not found at the specified URI.
    * - ``409 Conflict``

      - The operation conflicts with a non-CDMI access protocol lock or may cause a state transition error on the server.

</DIV>
<DIV>


Examples
-----
<DIV>
#. PUT to the queue URI the queue object name and contents:

    .. code-block:: http


    PUT /MyContainer/MyQueue HTTP/1.1

    Host: cloud.example.com

    Accept: application/cdmi-queue

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1

    &nbsp;

    {

        "metadata" : {

            

        }

    }

   The following shows the response.

    HTTP/1.1 201 Created

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1

    &nbsp;

    {

        "objectType" : "application/cdmi-queue",

        "objectID" : "00007E7F00104BE66AB53A9572F9F51E",

        "objectName" : "MyQueue",

        "parentURI " : "/MyContainer/",

        "parentID" : "00007ED900104F67307652BAC9A37C93", 

        "domainURI" : "/cdmi_domains/MyDomain/",

        "capabilitiesURI" : "/cdmi_capabilities/queue/",

        "completionStatus" : "Complete",

        "metadata" : {

            ...

        },

        "queueValues" : ""

    }
</DIV>
<DIV>
#. PUT to the queue object URI to create a new queue, copying from another queue:

    .. code-block:: http


    PUT /MyContainer/MyQueue HTTP/1.1

    Host: cloud.example.com

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1

    &nbsp;

    {

        "copy": "/MyContainer/SourceQueue?value:0-9"

    }

   The following shows the response.

    HTTP/1.1 201 Created

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1

    &nbsp;

    {

        "objectType": "application/cdmi-queue",

        "objectID": "00007E7F00104BE66AB53A9572F9F51E",

        "objectName": "MyQueue",

        "parentURI ": "/MyContainer/",

        "parentID": "00007ED900104F67307652BAC9A37C93",

        "domainURI": "/cdmi_domains/MyDomain/",

        "capabilitiesURI": "/cdmi_capabilities/queue/",

        "completionStatus": "Complete",

        "metadata": {

    				...

    		},

        "queueValues": "0-9"

    }
</DIV>
</DIV>
</DIV>
<DIV>

Read a Queue Object using CDMI
************************
<DIV>

Synopsis 
-----

To read all fields from an existing queue object, the following request shall be performed:

    GET <root URI>/<ContainerName>/<QueueName>

To read one or more requested fields from an existing queue object, one of the following requests shall be performed:

    GET <root URI>/<ContainerName>/<QueueName>?<fieldname>;<fieldname>;...

    GET <root URI>/<ContainerName>/<QueueName>?value:<range>;...

    GET <root URI>/<ContainerName>/<QueueName>?metadata:<prefix>;...

To read one or more queue values from an existing queue object, the following request shall be performed:

    GET <root URI>/<ContainerName>/<QueueName>?values:<count>
<DIV>
Where:


* <root URI> is the path to the CDMI cloud.
* <ContainerName> is zero or more intermediate containers.
* <QueueName> is the name of the queue object to be read from.
* <fieldname> is the name of a field.
* <range> is a byte range of the queue object value to be returned in the value field. If a byte range is requested, the range returned shall be from the oldest queue object value.
* <prefix> is a matching prefix that returns all metadata items that start with the prefix value.
* <count> is the number of values to be retrieved from the queue object. If more queue object entries are requested to be retrieved than exist in the queue object, the count is processed as if it is equal to the number of entries in the queue object.


The object shall also be accessible at <root URI>/cdmi_objectid/<objectID>. 

Reading a queue object shall, by default, return the complete value of the oldest item in the queue, unless the queueValues range is empty.
</DIV>
</DIV>
<DIV>


Capabilities
-----

The following capabilities describe the supported operations that may be performed when reading an existing queue object:


* Support for the ability to read the metadata of an existing queue object is indicated by the presence of the cdmi_read_metadata capability in the specified queue object.
* Support for the ability to read the value of an existing queue object is indicated by the presence of the cdmi_read_value capability in the specified queue object.
* Support for the ability to read a queue object using multi-part MIME is indicated by the presence of the "cdmi_multipart_mime" system-wide capability.

</DIV>
<DIV>


Request Headers
-----

The HTTP request headers for reading a CDMI queue object using CDMI are shown in `Request Headers - Read a Queue Object using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_21022"></A>Request Headers - Read a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Header
      - Type
      - Description
      - Requirement
    * - Accept
      - Header String
      - "application/cdmi-queue", "multipart/mixed", or a consistent value as per clause `Content-Type Negotiation`_
If "multipart/mixed", the body shall consist of one or more MIME parts, where the first part shall contain a body of content-type "application/cdmi-queue", and the second and subsequent parts shall each contain a queue value as described in `Update a Data Object using CDMI`_.
      - Optional
    * - X-CDMI-Specification-Version
      - Header String
      - A comma-separated list of versions that the client supports, e.g., "1.1, 1.5, 2.0"
      - Mandatory

</DIV>
<DIV>

Request Message Body 
-----

A request body shall not be provided.
</DIV>
<DIV>


Response Headers
-----

The HTTP response headers for reading a CDMI queue object using CDMI are shown in `Response Headers - Read a Queue Object using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_44353"></A>Response Headers - Read a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Header
      - Type
      - Description
      - Requirement
    * - X-CDMI-Specification-Version
      - Header String 
      - The server shall respond with the highest version supported by both the client and the server, e.g., "1.1".
If the server does not support any of the versions that the client supports, the server shall return an HTTP status code of ``400 Bad Request``
.
      - Mandatory
    * - Content-Type
      - Header String
      - "application/cdmi-queue"
      - Mandatory
    * - Location
      - Header String
      - The server shall respond with an absolute URI to which the reference redirects if the object is a reference.
      - Conditional

</DIV>
<DIV>


Response Message Body
-----

The response message body fields for reading a CDMI queue object using CDMI are shown in `Response Message Body - Read a Queue Object using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_12528"></A>Response Message Body - Read a Queue Object using CDMI (Sheet 1 of 4)
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Field Name
      - Type
      - Description
      - Requirement
    * - objectType
      - JSON String
      - "application/cdmi-queue"
      - Mandatory
    * - objectID
      - JSON String
      - Object ID of the object
      - Mandatory
    * - objectName
      - JSON String
      - Name of the object


        * For objects in a container, the objectName field shall be returned. 
        * For objects not in a container (objects that are only accessible by ID), the objectName field does not exist and shall not be returned. 

      - Conditional
    * - parentURI
      - JSON String
      - URI for the parent object


        * For objects in a container, the parentURI field shall be returned. 
        * For objects not in a container (objects that are only accessible by ID), the parentURI field does not exist and shall not be returned. 

Appending the objectName to the parentURI shall always produce a valid URI for the object. 
      - Conditional
    * - parentID
      - JSON String
      - Object ID of the parent container object


        * For objects in a container, the parentID field shall be returned. 
        * For objects not in a container (objects that are only accessible by ID), the parentID field does not exist and shall not be returned.

      - Conditional
    * - domainURI
      - JSON String
      - URI of the owning domain
      - Mandatory
    * - capabilitiesURI
      - JSON String
      - URI to the capabilities for the object
      - Mandatory
    * - completionStatus
      - JSON String
      - A string indicating if the object is still in the process of being created or updated by another operation, and after that operation is complete, indicates if it was successfully created or updated or if an error occurred.
The value shall be the string "Processing", the string "Complete", or an error string starting with the value "Error".
      - Mandatory
    * - percentComplete
      - JSON String
      - 

        * When the value of completionStatus is "Processing", this field, if provided, shall indicate the percentage of completion as a numeric integer value from 0 through 100. 
        * When the value of completionStatus is "Complete", this field, if provided, shall contain the value "100". 
        * When the value of completionStatus is "Error", this field, if provided, may contain any integer value from 0 through 100. 

      - Optional
    * - metadata
      - JSON Object
      - Metadata for the queue object. This field includes any user and data system metadata specified in the request body metadata field, along with storage system metadata generated by the cloud storage system. See `Metadata`_ for a further description of metadata.
      - Mandatory
    * - queueValues
      - JSON String
      - The range of designators for enqueued values. Every enqueued value shall be assigned a unique, monotonically-incrementing positive integer designator, starting from 0. If no values are enqueued, an empty string shall be returned. If values are enqueued, the lowest designator, followed by a hyphen ("-"), followed by the highest designator shall be returned.
      - Mandatory
    * - mimetype
      - JSON Array of JSON Strings
      - MIME types for each queue object value


        * The MIME types of the values are returned, each corresponding to the value in the same position in the JSON array.
        * This field shall only be provided when completionStatus is "Complete" and when one or more values are enqueued.

      - Optional
    * - valuerange
      - JSON Array of JSON Strings
      - The range of bytes of the queue object values to be returned in the value field


        * The value ranges of the values are returned, each corresponding to the value in the same position in the JSON array.
        * If a specific value range has been requested, the entry in the valuerange field shall correspond to the bytes requested. If the request extends beyond the end of the value, the valuerange field shall indicate the smaller byte range returned.
        * The valuerange field shall only be provided when the completionStatus field contains "Complete".

      - Optional
    * - valuetransferencoding
      - JSON Array of JSON Strings
      - The value transfer encoding used for each queue object value. Two value transfer encodings are defined:


        * "utf-8" indicates that the queue object value contains a valid UTF-8 string, and it shall be transported as a UTF-8 string in the value field.
        * "base64" indicates that the queue object value may contain arbitrary binary sequences, and it shall be transported as a base 64-encoded string in the value field.

The value transfer encodings are returned, each corresponding to the value in the same position in the JSON array.
The valuetransferencoding field shall only be provided when the completionStatus field contains "Complete".
      - Optional
    * - value
      - JSON Array of JSON Strings
      - The oldest enqueued queue object values


        * The values in the JSON array are returned in order from oldest to newest.
        * If the valuetransferencoding field indicates UTF-8 encoding, the corresponding value field shall contain a UTF-8 string using JSON escaping rules described in :rfc:`4627`.
        * If the valuetransferencoding field indicates base 64 encoding, the corresponding value field shall contain a base 64-encoded string as described in RFC :rfc:`4648`.
        * The value field shall not be provided when using multi-part MIME.
        * The value field shall only be provided when the completionStatus field contains "Complete".

      - Conditional


If individual fields are specified in the GET request, only these fields are returned in the result body. Optional fields that are requested but do not exist are omitted from the result body.
</DIV>
<DIV>

Response Status
-----

`HTTP Status Codes - Read a Queue Object using CDMI`_ describes the HTTP status codes that occur when reading a queue object using CDMI. 


.. list-table::  tbl_<A NAME="50532470_93312"></A>HTTP Status Codes - Read a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - HTTP Status
      - Description
    * - ``200 OK``

      - The queue object content was returned in the response.
    * - ``302 Found``

      - The resource is a reference to another resource.
    * - ``400 Bad Request``

      - The request contains invalid parameters or field names.
    * - ``401 Unauthorized``

      - The authentication credentials are missing or invalid.
    * - ``403 Forbidden``

      - The client lacks the proper authorization to perform this request.
    * - ``404 Not Found``

      - The resource was not found at the specified URI.
    * - ``406 Not Acceptable``

      - The server is unable to provide the object in the content type specified in the Accept header.

</DIV>
<DIV>


Examples
-----
<DIV>
#. GET to the queue object URI to read all fields of the queue object:

    .. code-block:: http


    GET /MyContainer/MyQueue HTTP/1.1

    Host: cloud.example.com

    Accept: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1

   The following shows the response.

    HTTP/1.1 200 OK 

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1 

    &nbsp;

    {

        "objectType": "application/cdmi-queue",

        "objectID": "00007E7F00104BE66AB53A9572F9F51E",

        "objectName": "MyQueue",

        "parentURI": "/MyContainer/",

        "parentID" : "00007ED900104F67307652BAC9A37C93", 

        "domainURI": "/cdmi_domains/MyDomain/",

        "capabilitiesURI": "/cdmi_capabilities/queue/",

        "completionStatus": "Complete",

        "metadata": {},

        "queueValues": "1-1",

        "mimetype": [

            "text/plain"

        ],

        "valuerange": [

            "0-19"

        ],

        "valuetransferencoding": [

            "utf-8"

        ],

        "value": [

            "First Enqueued Value"

        ]

    }
</DIV>
<DIV>
#. GET to the queue object URI to read the value and queue items of the queue object:

    .. code-block:: http


    GET /MyContainer/MyQueue?value;queueValues HTTP/1.1

    Host: cloud.example.com

    Accept: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1

   The following shows the response.

    HTTP/1.1 200 OK 

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1 

    &nbsp;

    {

        "queueValues" : "1-1",

        "value" : [

            "First Enqueued Value" 

        ] 

    }
</DIV>
<DIV>
#. GET to the queue object URI to read the first five bytes of the value of the queue object:

    .. code-block:: http


    GET /MyContainer/MyQueue?value:0-4 HTTP/1.1

    Host: cloud.example.com

    Accept: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1

   The following shows the response:

    HTTP/1.1 200 OK 

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1 

    &nbsp;

    {

        "value" : [

            "First" 

        ] 

    } 
</DIV>
<DIV>
#. GET to the queue object URI to read two values of the queue object:

    .. code-block:: http


    GET /MyContainer/MyQueue?mimetype;valuerange;values:2 HTTP/1.1 

    Host: cloud.example.com 

    Accept: application/cdmi-queue 

    X-CDMI-Specification-Version: 1.1 

   The following shows the response.

    HTTP/1.1 200 OK 

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1 

    &nbsp;

    {

        "mimetype" : [

            "text/plain",

            "text/plain" 

        ],

        "valuerange" : [

            "0-19",

            "0-20" 

        ],

        "value" : [

            "First Enqueued Value",

            "Second Enqueued Value" 

        ] 

    }
</DIV>
<DIV>
#.  GET to the queue object URI to read the queue object using multi-part MIME:

    .. code-block:: http


    GET /MyContainer/MyQueue HTTP/1.1 

    Host: cloud.example.com 

    Accept: multipart/mixed

    X-CDMI-Specification-Version: 1.1

   The following shows the response.

    HTTP/1.1 200 OK 

    Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08j34c0p

    X-CDMI-Specification-Version: 1.1

    

    --gc0p4Jq0M2Yt08j34c0p

    Content-Type: application/cdmi-queue

    

    {

    	"objectType": "application/cdmi-queue", 

    	"objectID": "00007ED9001035E14BD1BA70C2EE98FC", 

    	"objectName": "MyQueue", 

    	"parentURI": "/MyContainer/", 

    	"parentID" : " 00007ED90010C2414303B5C6D4F83170", 

    	"domainURI": "/cdmi_domains/MyDomain/", 

    	"capabilitiesURI": "/cdmi_capabilities/queue/", 

    	"completionStatus": "Complete", 

    	"metadata": {

    		...

    },

    	"queueValues": "1-2",

    	"mimetype": [

    		"application/octet-stream", 

    		"application/octet-stream"

    	],

    	"valuerange": [

    		"0-19", 

    		"0-36"

    	],

    	"valuetransferencoding": [

    		"base64",

    		"base64"

    	]

    }

    <EM CLASS="Comment-Reference">
</EM>


    --gc0p4Jq0M2Yt08j34c0p

    Content-Type: application/octet-stream

    Content-Transfer-Encoding: binary

    

    <20 bytes of binary data>

    

    --gc0p4Jq0M2Yt08j34c0p

    Content-Type: application/octet-stream 

    Content-Transfer-Encoding: binary

    

    <37 bytes of binary data>

    

    --gc0p4Jq0M2Yt08j34c0p--
</DIV>
</DIV>
</DIV>
<DIV>

Update a Queue Object using CDMI
************************
<DIV>

Synopsis 
-----

To update some or all fields in an existing queue object (excluding the enqueueing of values), the following request shall be performed:

    PUT <root URI>/<ContainerName>/<QueueName>

To add, update, and remove specific metadata items of an existing queue object, the following request shall be performed:

    PUT <root URI>/<ContainerName>/<QueueName>?metadata:<metadataname>;...
<DIV>
Where:


* <root URI> is the path to the CDMI cloud.
* <ContainerName> is zero or more intermediate containers.
* <QueueName> is the name of the queue object to be updated.


The object shall also be accessible at <root URI>/cdmi_objectid/<objectID>. An update shall not result in a change to the object ID.
</DIV>
</DIV>
<DIV>


Capability 
-----

The following capability describes the supported operations that may be performed when updating an existing queue object:


* Support for the ability to modify the metadata of an existing queue object is indicated by the presence of the cdmi_modify_metadata capability in the specified queue object.

</DIV>
<DIV>


Request Headers
-----

The HTTP request headers for updating a CDMI queue object using CDMI are shown in `Request Headers - Update a Queue Object using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_81371"></A>Request Headers - Update a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Header
      - Type
      - Description
      - Requirement
    * - Content-Type
      - Header String
      - "application/cdmi-queue"
      - Mandatory
    * - X-CDMI-Specification-Version
      - Header String
      - A comma-separated list of versions that the client supports, e.g., "1.1, 1.5, 2.0"
      - Mandatory

</DIV>
<DIV>


Request Message Body
-----

The request message body fields for updating a queue object using CDMI are shown in `Request Message Body - Update a Queue Object using CDMI`_.


.. list-table::  tbl_<A NAME="50532470_52028"></A>Request Message Body - Update a Queue Object using CDMI 
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Field Name
      - Type
      - Description
      - Requirement
    * - metadata
      - JSON Object
      - Metadata for the queue object. If present, the new metadata specified replaces the existing object metadata. If individual metadata items are specified in the URI, only those items are replaced; other items are preserved. 
See `Metadata`_ for a further description of metadata.
      - Optional
    * - domainURI
      - JSON String
      - URI of the owning domain. 


        * If different from the parent domain, the user shall have the "cross_domain" privilege (see cdmi_member_privileges in `Required Settings for Domain Member User Objects`_). 
        * If not specified, the existing domain shall be preserved.

      - Optional
    * - deserialize
      - JSON String
      - URI of a serialized CDMI queue object that shall be deserialized to update an existing queue object. The object ID of the serialized queue object shall match the object ID of the destination queue object. 
All enqueued items in the serialized queue object shall be added to the destination queue object. 
      - Optional [#a]_
    * - copy
      - JSON String
      - URI of a source CDMI queue object that shall be copied into the existing destination queue object. 


        * If the destination queue object URI and the copy source queue object URI both do not specify individual fields, the destination queue object shall be replaced with the source queue object, with the exception that the destination queue values shall be preserved. See `Enqueue a New Queue Value using CDMI`_ to copy enqueued items. 
        * If the destination queue object URI or the copy source queue object URI specifies individual fields, only the fields specified shall be used to update the destination queue object. If specified fields are not present in the source, these fields shall be ignored. If the value field is specified, it shall be ignored.  
        * If the destination queue object URI and the copy source queue object URI both specify fields, an HTTP status code of ``400 Bad Request``
 shall be returned to the client. 

If there are insufficient permissions to read the queue object at the source URI or update the queue object at the destination URI, or if the read operation fails, the copy shall return an HTTP status code of ``400 Bad Request``
, and the destination queue object shall not be updated.
      - Optional [#a]_
    * - deserializevalue
      - JSON String
      - A queue object serialized as specified in :rfc:`4648`. The object ID of the serialized queue object shall match the object ID of the destination queue object.
All enqueued items in the serialized queue object shall be added to the destination queue object. 
      - Optional [#a]_
    * <TH ROWSPAN="1" COLSPAN="4">
aOnly one of these fields shall be specified in any given operation. Except for value, these fields shall not be stored.

</DIV>
<DIV>

Response Header
-----

The HTTP response header for updating a CDMI queue object using CDMI is shown in `Response Header - Update a Queue Object using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_89460"></A>Response Header - Update a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Header
      - Type
      - Description
      - Requirement
    * - Location
      - Header String
      - The server shall respond with an absolute URI to which the reference redirects if the object is a reference.
      - Conditional

</DIV>
<DIV>

Response Message Body 
-----

A response body may be provided as per :rfc:`2616`.
</DIV>
<DIV>

Response Status
-----

`HTTP Status Codes - Update a Queue Object using CDMI`_ describes the HTTP status codes that occur when updating a queue object using CDMI. 


.. list-table::  tbl_<A NAME="50532470_35504"></A>HTTP Status Codes - Update a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - HTTP Status
      - Description
    * - ``204 No Content``

      - The data object content was returned in the response.
    * - ``302 Found``

      - The resource is a reference to another resource.
    * - ``400 Bad Request``

      - The request contains invalid parameters or field names.
    * - ``401 Unauthorized``

      - The authentication credentials are missing or invalid.
    * - ``403 Forbidden``

      - The client lacks the proper authorization to perform this request.
    * - ``404 Not Found``

      - The resource was not found at the specified URI.
    * - ``409 Conflict``

      - The operation conflicts with a non-CDMI access protocol lock or may cause a state transition error on the server.

</DIV>
<DIV>


Examples
-----
<DIV>
#. PUT to the queue object URI to set new metadata:

    .. code-block:: http


    PUT /MyContainer/MyQueue HTTP/1.1

    Host: cloud.example.com

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1

    &nbsp;

    {

        "metadata" : {

            

        }

    }

   The following shows the response.

    HTTP/1.1 204 No Content
</DIV>
<DIV>
#. PUT to the queue object URI to move six queue values from another queue: 

    .. code-block:: http


    PUT /MyContainer/MyQueue HTTP/1.1

    Host: cloud.example.com

    Content-Type: application/cdmi-queue

    X-CDMI-Specification-Version: 1.1

    &nbsp;

    {

        "move": "/MyContainer/SourceQueue?value:10-15"

    }

   The following shows the response.

    HTTP/1.1 204 No Content
</DIV>
</DIV>
</DIV>
<DIV>

Delete a Queue Object using CDMI
************************
<DIV>

Synopsis 
-----

To delete an existing queue object, along with all enqueued values, the following request shall be performed:

    DELETE <root URI>/<ContainerName>/<QueueName>
<DIV>
Where:


* <root URI> is the path to the CDMI cloud.
* <ContainerName> is zero or more intermediate containers.
* <QueueName> is the name of the queue object to be deleted.


The object shall also be accessible at <root URI>/cdmi_objectid/<objectID>.
</DIV>
</DIV>
<DIV>

Capability 
-----

The following capability describes the supported operations that may be performed when deleting an existing queue object:


* Support for the ability to delete an existing queue object is indicated by the presence of the cdmi_delete_queue capability in the specified queue object.

</DIV>
<DIV>

Request Header
-----

The HTTP request header for deleting a CDMI queue object using CDMI is shown in `Request Header - Delete a Queue Object using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_73443"></A>Request Header - Delete a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Header
      - Type
      - Description
      - Requirement
    * - X-CDMI-Specification-Version
      - Header String
      - A comma-separated list of versions that the client supports, e.g., "1.1, 1.5, 2.0"
      - Mandatory

</DIV>
<DIV>

Request Message Body 
-----

A request body may be provided as per :rfc:`2616`.
</DIV>
<DIV>

Response Headers 
-----

Response headers may be provided as per :rfc:`2616`.
</DIV>
<DIV>

Response Message Body 
-----

A response body may be provided as per :rfc:`2616`.
</DIV>
<DIV>

Response Status
-----

`HTTP Status Codes - Delete a Queue Object using CDMI`_ describes the HTTP status codes that occur when deleting a queue object using CDMI. 


.. list-table::  tbl_<A NAME="50532470_95652"></A>HTTP Status Codes - Delete a Queue Object using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - HTTP Status
      - Description
    * - ``204 No Content``

      - The queue object was successfully deleted.
    * - ``400 Bad Request``

      - The request contains invalid parameters or field names.
    * - ``401 Unauthorized``

      - The authentication credentials are missing or invalid.
    * - ``403 Forbidden``

      - The client lacks the proper authorization to perform this request.
    * - ``404 Not Found``

      - The resource was not found at the specified URI.
    * - ``409 Conflict``

      - The operation conflicts with a non-CDMI access protocol lock or may cause a state transition error on the server.

</DIV>
<DIV>

Example
-----
<DIV>
<H6 CLASS="Example">
DELETE to the queue object URI:</H6>

    DELETE /MyContainer/MyQueue HTTP/1.1

    Host: cloud.example.com

    X-CDMI-Specification-Version: 1.1

   The following shows the response.

    HTTP/1.1 204 No Content
</DIV>
</DIV>
</DIV>
<DIV>

Enqueue a New Queue Value using CDMI
************************
<DIV>

Synopsis 
-----

To enqueue one or more values into an existing queue object, the following request shall be performed:

    POST <root URI>/<ContainerName>/<QueueName>
<DIV>
Where:


* <root URI> is the path to the CDMI cloud.
* <ContainerName> is zero or more intermediate containers that already exist, with one slash (i.e., "/") between each pair of container names.
* <QueueName> is the name of the queue object to be enqueued into.


The object shall also be accessible at <root URI>/cdmi_objectid/<objectID>.
</DIV>
</DIV>
<DIV>


Capabilities
-----

The following capabilities describe the supported operations that may be performed when enqueuing a new value into an existing queue object:


* Support for the ability to modify the value of an existing queue object is indicated by the presence of the cdmi_modify_value capability in the specified queue object.
* Support for the ability to modify the value of an existing queue object using multi-part MIME is indicated by the presence of the "cdmi_multipart_mime" system-wide capability.

</DIV>
<DIV>


Request Headers
-----

The HTTP request headers for enqueuing a new CDMI queue object value using CDMI are shown in `Request Headers - Enqueue a New Queue Object Value using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_84690"></A>Request Headers - Enqueue a New Queue Object Value using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Header
      - Type
      - Description
      - Requirement
    * - Content-Type
      - Header String
      - "application/cdmi-queue" or "multipart/mixed"
If "multipart/mixed", the first part shall contain a body of content-type "application/cdmi-queue", and the subsequent parts shall contain the queue values as described in `Read a Data Object using CDMI`_.
      - Mandatory
    * - X-CDMI-Specification-Version
      - Header String
      - A comma-separated list of versions that the client supports, e.g., "1.1, 1.5, 2.0"
      - Mandatory

</DIV>
<DIV>


Request Message Body
-----

The request message body fields for enqueuing a new queue object value using CDMI are shown in `Request Message Body - Enqueue a New Queue Object Value using CDMI`_.


.. list-table::  tbl_<A NAME="50532470_57043"></A>Request Message Body - Enqueue a New Queue Object Value using CDMI  (Sheet 1 of 3)
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Field Name
      - Type
      - Description
      - Requirement
    * - mimetype
      - JSON Array of JSON Strings
      - MIME type(s) of the data value(s) to be enqueued into the queue object. 


        * This field shall be stored as part of the queue object.
        * If this field is not included and multi-part MIME is not being used, the value of "text/plain" shall be assigned as the field value.
        * If this field is not included and multi-part MIME is being used, the value of the "Content-Type" header of the corresponding MIME part shall be assigned as the field value.
        * The same number of array elements shall be present as is present in the value field, and the mimetype field shall be associated with the value in the corresponding position.
        * This mimetype field value shall be converted to lower case before being stored. 

      - Optional
    * - copy
      - JSON String
      - URI of a source CDMI data object or queue object from which the value shall be copied and enqueued 


        * If a copy source object URI to a data object is provided, the value, mimetype, and valuetransferencoding field values from the source data object are used to enqueue the new item into the destination queue object. 
        * If a copy source object URI to a queue object is provided, the corresponding value, mimetype, and valuetransferencoding field values of the specified number of enqueued items in the source queue object are copied to the destination queue object.

      - Optional [#a]_
    * - move
      - JSON String
      - URI of a source CDMI data object or queue object from which the value shall be moved and enqueued


        * If a move source object URI to a data object is provided, the value, mimetype, and valuetransferencoding field values from the source data object are used to enqueue the new item into the destination queue object, and the source data object is atomically deleted. 
        * If a move source object URI to a queue object is provided, the corresponding value, mimetype, and valuetransferencoding field values of the specified number of enqueued items in the source queue object are transferred to the destination queue object and atomically removed from the source queue object.

      - Optional [#a]_
    * - valuetransferencoding
      - JSON Array of JSON Strings
      - The value transfer encoding used for the queue object value. Two value transfer encodings are defined:


        * "utf-8" indicates that the queue object value contains a valid UTF-8 string, and shall be transported as a UTF-8 string in the value field.
        * "base64" indicates that the queue object value may contain arbitrary binary sequences, and shall be transported as a base 64 encoded string in the value field. Setting the contents of the queue object value field to any value other than a valid base 64 string shall result in an HTTP status code of ``400 Bad Request``
 being returned to the client.
        * If this field is not included and multi-part MIME is not being used, the value of "utf-8" shall be assigned as the field value.
        * If this field is not included and multi-part MIME is being used, the value of "utf-8" shall be assigned as the field value if the "Content-Type" header of the corresponding MIME part includes the charset parameter as defined in RFC 2046 of "utf-8" (e.g., ";charset=utf-8"). Otherwise, the value of "base64" shall be assigned as the field value. This field applies only to the encoding of the value when represented in JSON; the "Content-Transfer-Encoding" header of the part specifies the encoding of the value within a multi-part MIME request, as defined in :rfc:`2045`.
        * This field shall be stored as part of the object.

      - Optional
    * - value
      - JSON Array of JSON Strings
      - Data to be enqueued into the queue object.


        * If this field is not included and multi-part MIME is being used, the contents of the MIME parts shall be assigned as the field value.
        * If the corresponding valuetransferencoding field indicates UTF-8 encoding, the value shall be a UTF-8 string escaped using the JSON escaping rules described in :rfc:`4627`.
        * If the corresponding valuetransferencoding field indicates base 64 encoding, the value shall be first encoded using the base 64 encoding rules as described in :rfc:`4648`.

      - Optional [#a]_
    * <TH ROWSPAN="1" COLSPAN="4">
aOnly one of these fields shall be specified in any given operation. Except for value, these fields shall not be stored. If more than one of these fields is supplied, the server shall respond with an HTTP status code of ``400 Bad Request``
.

</DIV>
<DIV>

Response Headers 
-----

Response headers may be provided as per :rfc:`2616`.
</DIV>
<DIV>

Response Message Body 
-----

A response body may be provided as per :rfc:`2616`.
</DIV>
<DIV>

Response Status
-----

`HTTP Status Codes - Enqueue a New Queue Object Value using CDMI`_ describes the HTTP status codes that occur when enqueuing a new queue object using CDMI. 


.. list-table::  tbl_<A NAME="50532470_86025"></A>HTTP Status Codes - Enqueue a New Queue Object Value using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - HTTP Status
      - Description
    * - ``204 No Content``

      - The new queue object values were enqueued.
    * - ``400 Bad Request``

      - The request contains invalid parameters or field names.
    * - ``401 Unauthorized``

      - The authentication credentials are missing or invalid.
    * - ``403 Forbidden``

      - The client lacks the proper authorization to perform this request.
    * - ``404 Not Found``

      - The resource was not found at the specified URI.
    * - ``409 Conflict``

      - The operation conflicts with a non-CDMI access protocol lock or may cause a state transition error on the server.

</DIV>
<DIV>


Examples
-----
<DIV>
#. POST to the queue object URI a new value:

    .. code-block:: http


    POST /MyContainer/MyQueue HTTP/1.1 

    Host: cloud.example.com 

    Content-Type: application/cdmi-queue 

    X-CDMI-Specification-Version: 1.1 

    &nbsp;

    {

        "mimetype" : [

            "text/plain" 

        ],

        "value" : [

            "Value to Enqueue" 

        ] 

    } 

   The following shows the response.

    HTTP/1.1 204 No Content 
</DIV>
<DIV>
#. POST to the queue object URI to copy an existing value:

    .. code-block:: http


    POST /MyContainer/MyQueue HTTP/1.1 

    Host: cloud.example.com 

    Content-Type: application/cdmi-object 

    X-CDMI-Specification-Version: 1.1 

    &nbsp;

    {

        "copy" : "/MyContainer/MyDataObject.txt" 

    } 

   The following shows the response.

    HTTP/1.1 204 No Content
</DIV>
<DIV>
#. POST to the queue object URI to transfer 20 values from another queue object:

    .. code-block:: http


    POST /MyContainer/MyQueue HTTP/1.1 

    Host: cloud.example.com 

    Content-Type: application/cdmi-object 

    X-CDMI-Specification-Version: 1.1 

    &nbsp;

    {

        "move" : "/MyContainer/FirstQueue?values:20" 

    }

   The following shows the response.

    HTTP/1.1 204 No Content 
</DIV>
<DIV>
#. POST to the queue object URI two new values:

    .. code-block:: http


    POST /MyContainer/MyQueue HTTP/1.1 

    Host: cloud.example.com 

    Content-Type: application/cdmi-object 

    X-CDMI-Specification-Version: 1.1 

    &nbsp;

    {

        "mimetype" : [

            "text/plain",

            "text/plain" 

        ],

        "value" : [

            "First",

            "Second" 

        ] 

    } 

   The following shows the response.

    HTTP/1.1 204 No Content 
</DIV>
<DIV>
#. POST to the queue object URI two new values, one with base 64 transfer encoding and one with utf-8 transfer encoding:

    .. code-block:: http


    POST /MyContainer/MyQueue HTTP/1.1

    Host: cloud.example.com 

    Content-Type: application/cdmi-object

    X-CDMI-Specification-Version: 1.1

    

    {

       "mimetype": [

           "text/plain",

           "text/plain"

       ],

       "valuetransferencoding": [

           "utf-8",

           "base64"

       ],

       "value": [

           "First",

           "U2Vjb25k"

       ]

    }

   The following shows the response.

    HTTP/1.1 204 No Content
</DIV>
<DIV>
#. POST to the queue object URI the binary contents of two new values using multi-part MIME:

    .. code-block:: http


    POST /MyContainer/MyQueue HTTP/1.1 

    Host: cloud.example.com 

    Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08j34c0p

    X-CDMI-Specification-Version: 1.1

    

    --gc0p4Jq0M2Yt08j34c0p

    Content-Type: application/cdmi-queue 

    

    {}

    

    --gc0p4Jq0M2Yt08j34c0p

    Content-Type: application/octet-stream 

    Content-Transfer-Encoding: binary

    

    <20 bytes of binary data>

    

    --gc0p4Jq0M2Yt08j34c0p

    Content-Type: application/octet-stream

    Content-Transfer-Encoding: binary

    

    <37 bytes of binary data>

    

    --gc0p4Jq0M2Yt08j34c0p--

   The following shows the response.

    HTTP/1.1 204 No content
</DIV>
<DIV>
#. POST to the queue object URI the mime types and binary contents of two new values using multi-part MIME:

    .. code-block:: http


    POST /MyContainer/MyQueue HTTP/1.1 

    Host: cloud.example.com 

    Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08j34c0p

    X-CDMI-Specification-Version: 1.1

    

    --gc0p4Jq0M2Yt08j34c0p

    Content-Type: application/cdmi-queue 

    

    {

    	"mimetype" : [

    		"application/pdf",

    		"image/jpeg"

    	]

    }

    

    --gc0p4Jq0M2Yt08j34c0p

    Content-Type: application/octet-stream 

    Content-Transfer-Encoding: binary

    

    <20 bytes of binary data>

    

    --gc0p4Jq0M2Yt08j34c0p

    Content-Type: application/octet-stream

    Content-Transfer-Encoding: binary

    

    <37 bytes of binary data>

    

    --gc0p4Jq0M2Yt08j34c0p--

   The following shows the response.

    HTTP/1.1 204 No content
</DIV>
</DIV>
</DIV>
<DIV>

Delete a Queue Object Value using CDMI
************************
<DIV>

Synopsis 
-----

To delete one or more of the oldest enqueued values in an existing queue, the following request shall be performed:

    DELETE <root URI>/<ContainerName>/<QueueName>?value

    DELETE <root URI>/<ContainerName>/<QueueName>?values:<count>

    DELETE <root URI>/<ContainerName>/<QueueName>?values:<range>
<DIV>
Where:


* <root URI> is the path to the CDMI cloud.
* <ContainerName> is zero or more intermediate containers.
* <QueueName> is the name of the queue object to be deleted.
* <count> is the number of values, starting from the oldest, to be removed from the queue object. If more queue object entries are requested to be deleted than exist in the queue object, the count shall be considered equal to the number of entries in the queue object.
* <range> is the lowest to highest numbers as found in the queueValues field that are to be removed from the queue object. The first range value shall be smaller or equal to the lowest queue value. If the first range value is smaller than the lowest queue value, the lowest existing queue value shall be used. If the first range value is larger than the lowest queue value, an HTTP status code of ``400 Bad Request`` shall be returned to the client. If the second range value is higher than the highest existing queue value, the highest existing queue value shall be used, which allows for idempotent queue value deletion.


The object shall also be accessible at <root URI>/cdmi_objectid/<objectID>.

The "?value" suffix at the end of the queue resource URI shall be included to distinguish the deletion of the oldest value from the deletion of the queue object itself, as described in `Delete a Queue Object using CDMI`_ (which deletes all enqueued values).
</DIV>
</DIV>
<DIV>

Capability 
-----

The following capability describes the supported operations that may be performed when deleting an existing queue object value:


* Support for the ability to modify the value of an existing queue object is indicated by the presence of the cdmi_modify_value capability in the specified queue object.

</DIV>
<DIV>

Request Header
-----

The HTTP request header for deleting a CDMI queue object value using CDMI is shown in `Request Header - Delete a Queue Object Value using CDMI`_. 


.. list-table::  tbl_<A NAME="50532470_39443"></A>Request Header - Delete a Queue Object Value using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - Header
      - Type
      - Description
      - Requirement
    * - X-CDMI-Specification-Version
      - Header String
      - A comma-separated list of versions that the client supports, e.g., "1.1, 1.5, 2.0"
      - Mandatory

</DIV>
<DIV>

Request Message Body 
-----

A request body may be provided as per :rfc:`2616`.
</DIV>
<DIV>

Response Headers 
-----

Response headers may be provided as per :rfc:`2616`.
</DIV>
<DIV>

Response Message Body 
-----

A response body may be provided as per :rfc:`2616`.
</DIV>
<DIV>

Response Status
-----

`HTTP Status Codes - Delete a Queue Object Value using CDMI`_ describes the HTTP status codes that occur when deleting a queue object value using CDMI. 


.. list-table::  tbl_<A NAME="50532470_18647"></A>HTTP Status Codes - Delete a Queue Object Value using CDMI
    :header-rows: 1
    :widths: auto
    :align: center 


    * - HTTP Status
      - Description
    * - ``204 No Content``

      - The queue object value was successfully deleted.
    * - ``400 Bad Request``

      - The request contains invalid parameters or field names.
    * - ``401 Unauthorized``

      - The authentication credentials are missing or invalid.
    * - ``403 Forbidden``

      - The client lacks the proper authorization to perform this request.
    * - ``404 Not Found``

      - The resource was not found at the specified URI.
    * - ``409 Conflict``

      - The operation conflicts with a non-CDMI access protocol lock or may cause a state transition error on the server.

</DIV>
<DIV>

Example 
-----
<DIV>
#. DELETE to the queue object URI value to delete the oldest enqueued value:

    .. code-block:: http


    DELETE /MyContainer/MyQueue?value HTTP/1.1

    Host: cloud.example.com

    X-CDMI-Specification-Version: 1.1

   The following shows the response.

    HTTP/1.1 204 No Content
</DIV>
<DIV>
#. DELETE to the queue object URI value to remove the ten oldest values: 

    .. code-block:: http


    DELETE /MyContainer/MyQueue?values:10 HTTP/1.1 

    Host: cloud.example.com 

    X-CDMI-Specification-Version: 1.1 

   The following shows the response. 

    HTTP/1.1 204 No Content
</DIV>
<DIV>
#. DELETE to the queue object URI value to remove queue values 10 through 19: 

    .. code-block:: http


    DELETE /MyContainer/MyQueue?values:10-19 HTTP/1.1 

    Host: cloud.example.com 

    X-CDMI-Specification-Version: 1.1 

   The following shows the response. 

    HTTP/1.1 204 No Content
</DIV>
</DIV>
</DIV>
</DIV>