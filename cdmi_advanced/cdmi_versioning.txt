.. _clause_cdmi_versioning:

Data object versions
====================

Overview
********

Data object versioning supports multiple client use cases:

* Clients can preserve all data written to a data object over time by using versions to retain all updates made to a data object.
* Clients can control how long and much many historical versions are retained by specifying constraints in data system metadata.
* Clients can restore the contents of a historical version by copying it into the version-enabled data object.
* Clients can consistently retrieve data object values using multiple parallel or sequential transactions without worring about corruption due to concurrent updates by using the current version data object.
* Clients can detect where concurrent updates have occurred and can access any overwritten data by iterating through historical versions.
* Distributed CDMI implementations can merge concurrent changes made on different, eventually consistent nodes without resulting in data loss.

Version-enabled data objects allow the previous state of a data object to be retained when an update is performed. In a non-version-enabled data object, each update changes the state of the object and the previous state is lost. This mode of operation is shown in :numref:`fig_updates_to_a_nonversionenabled_data_object`.

.. _fig_updates_to_a_nonversionenabled_data_object:

.. figure:: /images/cdmi_versioning_non_versioned_update.pdf
    :align:  center
    :figwidth: 100%
   
    Updates to a non-version-enabled data object

When a data object has versioning enabled, each update creates a new "current version" with the same contents of the version-enabled data object, with the previous current version becoming a historical version. The current version and all historical versions can be accessed by ID, and are immutable. The version-enabled data object continues to be mutable and has the same behaviors to clients as a non-version-enabled data object. This behavior is shown in :numref:`fig_updates_to_a_versionenabled_data_object` from the perspective of a client.

.. _fig_updates_to_a_versionenabled_data_object:

.. figure:: /images/cdmi_versioning_versioned_update.pdf
    :align:  center
    :figwidth: 100%
   
    Updates to a version-enabled data object

Using this approach, CDMI clients that are not aware of versioning can continue to access version-enabled data objects the same way as non-version-enabled data objects, while CDMI clients that are aware of versioning can access and manage the immutable versions associated with the version-enabled data object.

Versioning is enabled for a data object by adding a data system metadata item that indicates that versioning is desired.

Version-enabled data objects and all associated versions contain additional storage system metadata items. These metadata items allow a client to discover the versions that are associated with a version-enabled data object and to iterate through these versions. 

The maximum number of versions to be retained, maximum age of versions to be retained, and the maximum space that can be consumed by versions is controlled by data system metadata.

When a data object is version enabled, it always contains at least one version, the "current version". The current version has the same contents as the version-enabled data object but has a different identifier (URI and Object Identifier) and is immutable. When a version-enabled data object is changed, a new current version is created, and the previous current version becomes a historical version.

Traversing version-enabled data objects
***************************************

Version-enabled data objects have additional metadata items that allow a client to discover and traverse historical versions.

Version-enabled data objects shall contain the following metadata items, as shown in :numref:`tbl_cdmi_version_metadata_items`.

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.29}
                    |>{\raggedright\arraybackslash}\Y{0.09}
                    |>{\raggedright\arraybackslash}\Y{0.48}
                    |>{\raggedright\arraybackslash}\Y{0.14}|

.. _tbl_cdmi_version_metadata_items:

.. list-table:: Version-enabled data object metadata items
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Metadata Item Name
      - Type
      - Description
      - Requirement
    * - ``cdmi_version_current``
      - JSON String
      - The URI of the current version of the version-enabled data object. This metadata item shall be present in the version-enabled data object and all historical versions.
      - Conditional
    * - ``cdmi_version_oldest``
      - JSON Array of JSON Strings
      - One or more URIs of the oldest version(s). This metadata item shall be present in the version-enabled data object, the current version and all historical versions except the oldest historical versions.
      - Conditional
    * - ``cdmi_version_object``
      - JSON String
      - The URI of the version-enabled data object. This metadata item shall be present in the current version and all historical versions.
      - Conditional
    * - ``cdmi_version_parent``
      - JSON String
      - The URI of the previous historical version. This metadata item shall be present in the current version and all historical versions except the oldest historical versions.
      - Conditional
    * - ``cdmi_version_children``
      - JSON Array of JSON Strings
      - One or more URIs of historical versions (or the current version) created by updating a given historical version. This metadata item shall be present in all historical versions.
      - Conditional

Situations where a version-enabled data object or a historical data object may have multiple oldest versions or multiple children is explained in :numref:`%s <clause_cdmi_versioning_concurrent_updates>`.

To visualize how these metadata items allow a client to traverse data object versions, the linkages between the version-enabled data object and data object versions in the final state of :numref:`fig_updates_to_a_versionenabled_data_object` is shown in :numref:`fig_versioned_linkages`.

.. _fig_versioned_linkages:

.. figure:: /images/cdmi_versioning_versioned_linkages.pdf
    :align:  center
    :figwidth: 100%
   
    Linkages between a version-enabled data object and data object versions

A client accessing the version-enabled data object (``/b.txt``) can traverse to the current version and to the oldest version.

A client accessing a data object version can traverse to the version-enabled data object, to the current version, to the parent version, to child versions, and to the oldest version.

.. _clause_cdmi_versioning_concurrent_updates:

Concurrent updates and version-enabled data objects
***************************************************

When multiple concurrent updates are performed against a version-enabled data object, each update is performed against the state of the object at the time the update starts. The change to the state resulting from the update to the object becomes visible to clients at the time the update completes.

Two different types of concurrent updates can occur: overlapping updates and nested updates.

:numref:`fig_concurrent_updates_to_a_versionenabled_data_object` and :numref:`fig_versioned_linkages_concurrent` show the update sequence and resulting version linkages for overlapping updates:

.. _fig_concurrent_updates_to_a_versionenabled_data_object:

.. figure:: /images/cdmi_versioning_concurrent_updates.pdf
    :align:  center
    :figwidth: 100%
   
    Overlapping concurrent updates

.. _fig_versioned_linkages_concurrent:

.. figure:: /images/cdmi_versioning_concurrent_linkages.pdf
    :align:  center
    :figwidth: 100%
   
    Linkages for overlapping updates

In the sequence shown in :numref:`fig_concurrent_updates_to_a_versionenabled_data_object`, both the "Second" and "Third" updates are performed against the "First" state. As the "Third" update completes last, it becomes the current version. In this example, historical version ``00007ED...8EA`` would have two children, versions ``00007ED...552`` and ``00007ED...D21``. Both versions ``00007ED...552`` and ``00007ED...D21`` would have the same parent ``00007ED...8EA``.

.. raw:: latex

  \newpage

:numref:`fig_nested_updates_to_a_versionenabled_data_object` and :numref:`fig_versioned_linkages_nested` show the update sequence and resulting version linkages for nested updates:

.. _fig_nested_updates_to_a_versionenabled_data_object:

.. figure:: /images/cdmi_versioning_nested_updates.pdf
    :align:  center
    :figwidth: 100%
   
    Nested concurrent updates

.. _fig_versioned_linkages_nested:

.. figure:: /images/cdmi_versioning_nested_linkages.pdf
    :align:  center
    :figwidth: 100%
   
    Linkages for nested updates

In the sequence shown in these figures, both the "Second" and "Third" updates are performed against the "First" state. As the "Second" update completes last, it becomes the current version. In this example, historical version ``00007ED...8EA`` would have two children, versions ``00007ED...552`` and ``00007ED...D21``. Both versions ``00007ED...552`` and ``00007ED...D21`` would have the same parent ``00007ED...8EA``.

Both of these data structures are equivalent, with the only difference being which update completed last.

Capabilities for version-enabled data objects
*********************************************

The relationship between version-enabled data objects, data object versions, and capabilities is shown in :numref:`fig_versioning_capabilities`.

.. _fig_versioning_capabilities:

.. figure:: /images/cdmi_versioning_capabilities.pdf
    :align:  center
    :figwidth: 100%

    Version to ``capabilityURI`` relationships

Data object versions are immutable but may be deleted by a client or by the system, depending on the data system metadata specified.

Updates triggering version creation
***********************************

If versioning is enabled by setting the value of the ``cdmi_versions`` metadata item in the version-enabled data object to "``value``", the following updates will trigger the creation of a new version:

* changing the ``mimetype``,
* changing the ``value``, or
* changing the ``valuetransferencoding``.

If versioning is enabled by setting the value of the ``cdmi_versions`` metadata item in the version-enabled data object to "``user``", the following updates will trigger the creation of a new version:

* changing the ``mimetype``,
* changing the ``value``,
* changing the ``valuetransferencoding``, or
* adding, modifying, or removing user metadata.

If versioning is enabled by setting the value of the ``cdmi_versions`` metadata item in the version-enabled data object to "``all``", then all updates to the data object will trigger the creation of a new version.

While ACLs for historical versions are left unchanged, the effective ACL, owner, and domain of historical versions shall be the ACL, owner, and domain of the current version-enabled data object. This means that changing the ACL of a versioned data object also overrides the historical version ACL for all previous versions.

Modifications performed with the ``X-CDMI-Partial`` header shall not trigger the creation of a new version until the ``completionStatus`` is changed from "``Processing``" to "``Complete``".

Operations on version-enabled data objects
******************************************

Moving a version-enabled data object within a system is considered to be an update to the ``name`` and/or ``parentURI`` fields.

Moving a version-enabled data object between systems moves all data object versions associated with the version-enabled data object and preserves all identifiers. If the destination name and/or URI are different, the move is considered to be an update to the ``name`` and/or ``parentURI`` fields.

Copying a version-enabled data object shall only copy the current version of the version-enabled data object. Versions of the version-enabled data object are not copied.

Deleting a version-enabled data object shall also delete all versions associated with that version-enabled data object.

Disabling versioning for a version-enabled data object shall preserve all versions. Previously existing versioning metadata shall remain present while versioning is disabled. Re-enabling versioning for a data object that previously was version-enabled shall result in the creation of a new current version.

If a version-enabled data object is placed under retention or hold, the retention behaviors of the version-enabled data object shall be applied to the data object versions.

No additional notifications are defined for version-enabled data objects. When a version-enabled data object is updated, an additional creation notification message shall be generated for the created data object version. Likewise, when a data object version is accessed or deleted, a notification message is generated. If a limited number, size, or age for versions is requested and a change to a version-enabled data object results in a version being automatically deleted, then the system shall generate a corresponding deletion notification message for the deleted data object version.

Operations on data object versions
**********************************

A data object version is presented to the client as a standard CDMI data object.

Moving, copying over, deserializing over, and updating a data object version shall not be permitted and shall result in an HTTP status code of ``403 Forbidden``.

Copying a data object version is permitted. For example, to promote a version to become the current version of a version-enabled data object, the URI of the data object version is used in the copy field when performing an update to the URI of the version-enabled data object. Updates may also be performed as part of the copy operation.

Deleting the current version or historical versions shall maintain the relationships in :numref:`tbl_cdmi_version_metadata_items`. 

Deleting the current version shall revert the current version to the parent. If there is no parent version, deleting the current version shall result in an HTTP status code of ``403 Forbidden``.

Deleting a historical version shall only be permitted when the client has ACL permissions to delete the historical version and has ACL permissions to delete the version-enabled data object.

Deleting a historical version shall use the domainURI metadata of the version-enabled data object.

Reading a historical version shall update the ``cdmi_acount`` and ``cdmi_atime`` of the historical version, when present.

Reading a historical version shall only be permitted when the client has ACL permissions to read the historical version and has ACL permissions to read the version-enabled data object.

Reading a historical version shall use the domainURI metadata of the version-enabled data object.

Standard notification messages are sent when data object versions are read or deleted.

Query of data object versions
*****************************

Data object versions are regular CDMI objects, consequently they will be included in query results unless explicitly excluded.

Querying for data object versions is performed by including the scope:

    .. code-block:: none

            "metadata" : {
                "cdmi_version_children" : "*"
            }

Querying for version-enabled data objects (but not their versions) is performed by including the scope:

    .. code-block:: none

            "metadata" : {
                "cdmi_versioning" : "*"
            }

Querying for non-versioned data objects with no versions is performed by including the scope:

    .. code-block:: none

            "metadata" : {
                "cdmi_version_current" : "!*"
            }

Querying for non-versioned data objects with versions is performed by including the scope:

    .. code-block:: none

            "metadata" : {
                "cdmi_versioning" : "!*",
                "cdmi_version_current" : "*"
            }

Version-enabled data object serialization
*****************************************

Version-enabled data objects are serialized by performing the following steps:

* Serialize the current version and all historical versions as described in :numref:`%s <canonical_serialization_format>`.
* Place the serialized current version and historical versions into a JSON Array.
* Serialize the version-enabled data object as described in :numref:`%s <canonical_serialization_format>`.
* Replace the value field in the serialized version-enabled data object with the JSON Array containing the serialized current version and historical versions.

.. raw:: latex

  \vspace*{1ex}

Serializing a non-version-enabled data object that has versions shall follow the same process.

EXAMPLE 1: A version-enabled data object with two historical versions is serialized.

    .. code-block:: none

            {
                "objectType" : "application/cdmi-object",
                "objectID" : "00007ED900100DA32EC94351F8970400",
                "objectName" : "MyVersionedDataObject.txt",
                "parentURI" : "/MyContainer/",
                "parentID" : "00007E7F00102E230ED82694DAA975D2", 
                "domainURI" : "/cdmi_domains/MyDomain/", 
                "capabilitiesURI" : "/cdmi_capabilities/dataobject/", 
                "completionStatus" : "Complete", 
                "mimetype" : "text/plain", 
                "metadata" : {
                    "cdmi_size" : "33",
                    "cdmi_versioning" : "user",
                    "cdmi_version_object" : "/cdmi_objectid/00007ED900100DA32EC94351F8970400",
                    "cdmi_version_current" : "/cdmi_objectid/00007ED90010F077F4EB1C99C87524CC",
                    "cdmi_version_oldest" : [
                        "/cdmi_objectid/00007ED90010512EB55A9304EAC5D4AA"
                    ],

                    ...
                },
                "value" : [
                    {
                        "objectType" : "application/cdmi-object",
                        "objectID" : "00007ED90010F077F4EB1C99C87524CC",
                        "objectName" : "MyVersionedDataObject.txt",
                        "parentURI" : "/MyContainer/",
                        "parentID" : "00007E7F00102E230ED82694DAA975D2", 
                        "domainURI" : "/cdmi_domains/MyDomain/", 
                        "capabilitiesURI" : "/cdmi_capabilities/dataobject/dataobject_version/", 
                        "completionStatus" : "Complete", 
                        "mimetype" : "text/plain", 
                        "metadata" : {
                            "cdmi_size" : "33",
                            "cdmi_version_object" : "/cdmi_objectid/00007ED900100DA32EC94351F8970400",
                            "cdmi_version_current" : "/cdmi_objectid/00007ED90010F077F4EB1C99C87524CC",
                            "cdmi_version_oldest" : [
                                "/cdmi_objectid/00007ED90010512EB55A9304EAC5D4AA"
                            ],
                            "cdmi_version_parent" : "/cdmi_objectid/00007ED9001005192891EEBE599D94BB",
                            "cdmi_version_children" : [ ],

                            ... 
                        },
                        "valuerange" : "0-32", 
                        "valuetransferencoding" : "utf-8", 
                        "value" : "Third version of this Data Object"
                    },
                    {
                        "objectType" : "application/cdmi-object",
                        "objectID" : "00007ED9001005192891EEBE599D94BB",
                        "objectName" : "MyVersionedDataObject.txt",
                        "parentURI" : "/MyContainer/",
                        "parentID" : "00007E7F00102E230ED82694DAA975D2", 
                        "domainURI" : "/cdmi_domains/MyDomain/", 
                        "capabilitiesURI" : "/cdmi_capabilities/dataobject/dataobject_version/", 
                        "completionStatus" : "Complete", 
                        "mimetype" : "text/plain", 
                        "metadata" : {
                            "cdmi_size" : "34",
                            "cdmi_version_object" : "/cdmi_objectid/00007ED900100DA32EC94351F8970400",
                            "cdmi_version_current" : "/cdmi_objectid/00007ED90010F077F4EB1C99C87524CC",
                            "cdmi_version_oldest" : [
                                "/cdmi_objectid/00007ED90010512EB55A9304EAC5D4AA"
                            ],
                            "cdmi_version_parent" : "/cdmi_objectid/00007ED90010512EB55A9304EAC5D4AA",
                            "cdmi_version_children" : [
                                "/cdmi_objectid/00007ED90010F077F4EB1C99C87524CC"
                            ],

                            ... 
                        },
                        "valuerange" : "0-33", 
                        "valuetransferencoding" : "utf-8", 
                        "value" : "Second version of this Data Object"
                    },
                    {
                        "objectType" : "application/cdmi-object",
                        "objectID" : "00007ED90010512EB55A9304EAC5D4AA",
                        "objectName" : "MyVersionedDataObject.txt",
                        "parentURI" : "/MyContainer/",
                        "parentID" : "00007E7F00102E230ED82694DAA975D2", 
                        "domainURI" : "/cdmi_domains/MyDomain/", 
                        "capabilitiesURI" : "/cdmi_capabilities/dataobject/dataobject_version/", 
                        "completionStatus" : "Complete", 
                        "mimetype" : "text/plain", 
                        "metadata" : {
                            "cdmi_size" : "33",
                            "cdmi_version_object" : "/cdmi_objectid/00007ED900100DA32EC94351F8970400",
                            "cdmi_version_current" : "/cdmi_objectid/00007ED90010F077F4EB1C99C87524CC",
                            "cdmi_version_oldest" : [
                                "/cdmi_objectid/00007ED90010512EB55A9304EAC5D4AA"
                            ],
                            "cdmi_version_children" : [
                                "/cdmi_objectid/00007ED9001005192891EEBE599D94BB"
                            ],

                            ... 
                        },
                        "valuerange" : "0-32", 
                        "valuetransferencoding" : "utf-8", 
                        "value" : "First version of this Data Object"
                    }
                ]
            }

Deserializing a version-enabled data object or a non-version-enabled data object with versions shall restore the data object and all serialized versions.

Individually serializing and deserializing current versions or historical versions shall not be permitted.

Deserializing a serialized any data object with versions onto a system that does not support versions shall result in an HTTP status code of ``400 Bad Request``.

