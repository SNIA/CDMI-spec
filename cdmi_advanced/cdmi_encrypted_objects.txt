.. _clause_cdmi_encrypted_objects:

Encrypted objects
=================

Overview
********

A cloud storage system may optionally implement additional operations against encrypted objects. Support for these operations are indicated by the presence of the cloud storage system-wide capabilities for encrypted objects.

Encrypted object operations include the ability to encrypt, re-encrypt, and decrypt objects that are already stored in the cloud (in-place), to sign and verify the signature of encrypted objects, and to access and update the plaintext associated with encrypted objects.

The CDMI International Standard does not specify the method by which keys are managed. Key management services are provided by an external key management system (KMS), and the use of the KMIP standard is given as an example of how a CDMI server interacts with an external KMS.

CDMI objects may contain values that are encrypted. Operations against an encrypted CDMI object are only supported if the encrypted object value is a valid CMS or JWE JSON format. The CMS or JWE JSON object shall include an embedded mimetype of the encrypted object. For JWE, the "``cty``" header shall be used for this purpose.


Encryption operations
*********************
The state transition diagram for encrypted objects is shown in :numref:`fig_encrypted_object_state_transistions`:

.. _fig_encrypted_object_state_transistions:

.. figure:: /images/cdmi_encrypted_states.pdf
    :align:  center
    :figwidth: 100%
   
    Encrypted object state transistions
    
The following eight encryption operations are defined:

Create a new encrypted object
-----------------------------

Client-encrypted objects shall be stored to a CDMI server using a standard HTTP or CDMI PUT operation, as described in clauses :numref:`%s <ref_http_container_object_create>` and :numref:`%s <ref_cdmi_data_object_create>`. The client shall indicate that an object is encrypted by specifying a mimetype of "``application/cms``" or "``application/jose+json``".

A client may register an encryption key, signing keys and/or verification keys with a Key Management System (KMS), and may indicate the Key IDs in ``cdmi_enc_key_id``, ``cdmi_enc_value_sign_id``, ``cdmi_enc_object_sign_id``, ``cdmi_enc_value_verify_id``, and/or ``cdmi_enc_object_verify_id`` metadata items. This allows the CDMI server to access the keys from the KMS on behalf of a client, when needed.

Creating an encrypted objects on a CDMI server does not require any encryption-specific capabilities to be supported, and is backwards compatible with earlier versions of the CDMI standard. This permits encrypted objects to be stored and transferred by CDMI servers that do not support encryption-specific functionality.

Delete an encrypted object
--------------------------

Encrypted objects shall be deleted using a standard HTTP or CDMI DELETE operation, as described in  :numref:`clause %s <ref_http_container_object_delete>` and  :numref:`clause %s <ref_cdmi_data_object_delete>`. Any client with sufficient permissions shall be permitted to delete an encrypted object, regardless of if they can access the decryption keys.

Encrypt an unencrypted object
-----------------------------

Existing unencrypted objects shall be encrypted in-place by performing a CDMI PATCH operation, as described in  :numref:`clause %s <ref_cdmi_data_object_update>`, that changes the object mimetype to "``application/cms``" or "``application/jose+json``" and specifies a ``cdmi_enc_key_id`` metadata item. The client may also specify a ``cdmi_enc_value_sign_id`` and/or ``cdmi_enc_value_verify_id`` metadata item to indicate that the object is to be signed, and to provide signature verification information.

The CDMI Server shall use the client's credentials (which are included in HTTP headers, and are out of scope of this International Standard) to retreive the encryption and signing keys, and encryption and signing algorithm information from the KMS, and shall use the keys to encrypt and sign the value of the object. The mimetype of the encrypted value is stored in the CMS wrapper, or in a "``cty``" field of the JWE JSON.

Decrypt an encrypted object
---------------------------

Existing encrypted objects shall be decrypted in-place by performing a CDMI PATCH operation, as described in  :numref:`clause %s <ref_cdmi_data_object_update>`, that changes the object mimetype from "``application/cms``" or "``application/jose+json``" to the original mimetype as specified in the CMS wrapper, or in the "``cty``" field of the JWE JSON. Specifying any other fields or metadata shall return a ````400 Bad Request```` result code.

The CDMI Server shall use the client's credentials (which are included in HTTP headers, and are out of scope of this International Standard) to retreive the encryption, signing and verification keys, and encryption, signing and verification algorithm information from the KMS, and shall use the keys to decrypt and verify the encrypted value and user metadata included in the object.

Re-encrypt an encrypted object
------------------------------

Existing encrypted objects shall be re-encrypted in-place by performing a CDMI PATCH operation, as described in  :numref:`clause %s <ref_cdmi_data_object_update>`, that retains the object mimetype of "``application/cms``" or "``application/jose+json``", or changes the object mimetype from "``application/cms``" to "``application/jose+json``", or vice-versa. The client shall also specify a new ``cdmi_enc_key_id``, ``cdmi_enc_value_sign_id`` and/or ``cdmi_enc_value_verify_id`` metadata item to indicate the new key(s) to be used. Specifying any other fields or metadata shall return a ``400 Bad Request`` result code.

The CDMI Server shall use the client's credentials (which are included in HTTP headers, and are out of scope of this International Standard) to retreive both the original encryption and signing keys using the original metadata values, and the new encryption and signing keys using the new metadata values from the KMS, and shall use these keys to decrypt, verify, encrypt and sign the value of the object, as needed.

If an encrypted object does not have an existing ``cdmi_enc_key_id`` metadata item, does not have a "``kid``" header, and no keys are associated with the Object ID, the specified metadata shall be added to the object, and no re-encryption operation shall be performed.

Access ciphertext of an encrypted object
----------------------------------------

The ciphertext content of an encrypted object shall be read by performing an HTTP GET operation, as described in  :numref:`clause %s <http_data_object_read>`, with an Accept header value of "``application/cms``" or "``application/jose+json``", depending on the mimetype of the encrypted object.

The ciphertext content of an encrypted object shall also be read by performing a CDMI GET operation, as described in  :numref:`clause %s <ref_cdmi_data_object_read>`.


Access plaintext of an encrypted object
---------------------------------------

The plaintext value of an encrypted object shall be read by performing an HTTP GET operation, as described in   :numref:`clause %s <http_data_object_read>`, with an Accept header value other than "``application/cms``" or "``application/jose+json``", typically "``*/*``". Object plaintext cannot be transparently accessed using a CDMI GET.

The CDMI Server shall use the client's credentials (which are included in HTTP headers, and are out of scope of this International Standard) to retreive the encryption, signing and verification keys, and encryption, signing and verification algorithm information from the KMS, and shall use the keys to decrypt and verify the encrypted value included in the object.

When an encrypted object is decrypted for access, the plaintext shall not be retained or cached by the CDMI server.

Update plaintext of an encrypted object
---------------------------------------

The plaintext value of an encrypted object shall be modified by performing an HTTP PATCH operation, as described in   :numref:`clause %s <http_data_object_update>`, with an Content-Type header value other than "``application/cms``" or "``application/jose+json``", typically "``*/*``"., depending on the mimetype of the encrypted object. Object plaintext cannot be transparently modified using a CDMI GET.

The CDMI Server shall use the client's credentials (which are included in HTTP headers, and are out of scope of this International Standard) to retreive the encryption, signing and verification keys, and encryption, signing and verification algorithm information from the KMS, and shall use the keys to decrypt and verify the encrypted value, update the value, and re-encrypt/re-sign the updated value.

When an encrypted object is decrypted for update, the plaintext shall not be retained or cached by the CDMI server.

Other CDMI operations
---------------------

Other operations specifed by this International Standard (such as copying, serializing, querying, etc) treat an encrypted value the same way as a non-encrypted value.

Example uses of encrypted objects
*********************************

Encrypted objects can be used with CDMI systems in the following ways:

-	**Passthrough** – A client may store an encrypted object in any format in a CDMI server, with the ciphertext being accessible to the server and to other authorized clients. No access to the plaintext is provided. Passthrough use is compatible with all CDMI systems and is useful when the clients manage all security-related operations and want to protect against potentially untrustworthy clouds.
-	**Server-side encryption and signing** – A client may instruct a CDMI server that supports encrypted object operations to take an existing CDMI object and encrypt or encrypt and sign it in place into CMS or JWE JSON representation, where the value of the object is persistently stored from that point on in an encrypted format. Server-side encryption and signing is useful when clients trust the CDMI server and want to increase object security without having to re-upload the data.
-	**Server-side decryption** – A client may instruct a CDMI server that supports encrypted object operations to take an existing CDMI object and decrypt it in place from a CMS or JWE JSON representation, where the value of the object is persistently stored from that point on in a decrypted format. Server-side decryption is useful when a client trusts the CDMI server and wants to decrease object security without having to re-upload the data.
-	**Client access decryption** – A CDMI server may automatically attempt to decrypt an encrypted object when accessed via HTTP. Client access decryption is useful to provide transparent access to authorized HTTP clients without requiring modifications to the HTTP clients.
-	**Cloud access decryption** – A CDMI server may automatically decrypt encrypted objects when it has access to the decryption keys. Cloud access decryption is useful for cloud-resident data processing performed by the CDMI server, such as virus scanning, query, and analytics.
-	**Signature verification** – A CDMI server can automatically verify signatures that are attached to encrypted objects that include a signature. Signature verification is useful for detecting corruption or alteration before delivering data to a client.

KMS integration
***************

The encryption key is obtained from the KMS using a unique identifier that is stored in the ``cdmi_enc_key_id`` metadata item associated with the encrypted object. If this metadata item is not present, the CDMI object ID shall be used to locate the key.

When a client requests that an operation be performed that requires accessing the key for the object, the CDMI server evaluates the credentials provided by the client to determine if the client is authorized to perform the requested operation. If the operation is permitted, the CDMI server retrieves the key from the KMS to complete the requested operation. To retrieve the key, the client may be required to provide additional information in the HTTP request that the CDMI server can then use to authenticate to the KMS.

The CDMI International Standard does not specify the mechanism by which the CDMI server communicates with the KMS. In this International Standard, the KMIP protocol is used as an example. CMS and JWE strings for algorithms, key lengths, etc., need to be mapped to the strings used by the KMS (see KMIP clause 9.1.3.2.7).

All keys are created and managed externally to the CDMI server, typically by the client or a system operating on behalf of the client. As a consequence, the CDMI server requires read-only access to the KMS. The CDMI server shall not cache keys.

CMS format
**********

Any valid CMS-formatted data may be stored to a CDMI server. However, encrypted object operations are only defined for the following subset of valid CMS-formatted data.

For encryption operations, the CDMI server shall support the following:

-	``EnvelopedData``
-	``EncryptedContentInfo``
-	``contentEncryptionAlgorithm`` value listed in the ``cdmi_cms_encryption`` capability of that CDMI server

For signature operations, the CDMI server shall support the following:

-	``AuthenticatedData``
-	``SignedData``
-	``digestAlgorithms`` value listed in the ``cdmi_cms_digest`` capability of that CDMI server
-	``SignerInfo``
-	``signatureAlgorithm`` value listed in the ``cdmi_cms_signature`` capability of that CDMI server

The following CMS-formatted data may be ignored: ``recipientInfos``

JOSE format
***********

Any valid JWE-formatted data may be stored to a CDMI server. However, encrypted object operations are only defined for the following subset of valid JWE-formatted data.

For encryption operations, the CDMI server shall support the following:

-	JWE with Direct Encryption (Symmetric Key from KMS)
-	JWE with Key Encryption (Public Key from KMS) 

For signature operations, the CDMI server shall support the following:

-	JWS RSA (Private Key from KMS)
-	JWS ECDSA (Private Key from KMS)
-	JWS HMAC-SHA2 (Symmetric Key from KMS)

The following JOSE-formatted data may be ignored: Multiple recipients and multiple signatures


.. _ref_cdmi_encrypted_objects_signature_verification:

Signature/digest verification
*****************************

If a signature is present as part of the CMS or JWE JSON value, the CDMI server shall verify that the signature of the value is valid before allowing plaintext access or modification.

If a whole-object signature is present, the CDMI server shall verify that the signature contained in the ``cdmi_enc_signature`` metadata item is valid before allowing any read operations for the object. Write operations are permitted for an object with an invalid or unverifiable whole-object signature.

When present, a whole-object signature shall be attached as a "``cdmi_enc_signature``" metadata item in JWS compact format, with the second field (the JWS payload field) replaced with an empty string as described in Appendix F of RFC 7515.

For signature creation and verification, payload field shall be computed using the following process:

1. Create a serialized representation of the CDMI object, as described in  :numref:`clause %s <clause_cdmi_serialization>`
2. Remove the following metadata items, if present:

   - ``cdmi_atime``
   - ``cdmi_acount``
   - ``cdmi_enc_signature``
   - Any ``*_provided`` metadata items
3. Sort all JSON objects in the serialized CDMI object according to the following rules:

    - Within each JSON object, name/value pair entries shall be sorted lexicographically by name
    - Within each JSON array, the initial order shall be preserved
4. Remove all JSON whitespace
5. Base64 URL encode, according to the JWS RFC 7515 :cite:`rfc7515`

Error handling
**************

If a decryption or signature validation operation is requested against a CDMI object containing an invalid CMS or JWE JSON representation, an HTTP status code of ``500 Internal Error`` shall be returned to the client.

If a decryption or signature validation operation is requested against a CDMI object containing a valid CMS or JWE JSON representation that uses an unsupported algorithm or feature, an HTTP status code of ``501 Not Implemented`` shall be returned to the client.

If a decryption or signature validation operation is requested against a CDMI object containing a valid CMS or JWE JSON representation, but the required keys are temporarily unavailable given the credentials presented, an HTTP status code of ``408 Request Timeout`` shall be returned to the client.

If a decryption or signature validation operation is requested against a CDMI object containing a valid CMS or JWE JSON representation, but the required keys are unavailable given the credentials presented, an HTTP status code of ``401 Unauthorized`` shall be returned to the client.

If a decryption or signature validation operation is requested against a CDMI object containing a valid CMS or JWE JSON representation, valid keys are available, and signature verification fails, an HTTP status code of ``403 Forbidden`` shall be returned to the client.
