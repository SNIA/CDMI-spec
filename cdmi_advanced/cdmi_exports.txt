.. _clause_cdmi_exports:

Exported protocols
==================

.. _ref_exports_overview:

Overview
********

Container objects can be exported via multiple storage protocols. This is specified by adding an ``exports`` field to the container object. The ``exports`` field contains zero or more named exports, each of which has elements corresponding to the export protocol type, such as: 

* The type of export protocol;
* The user-facing identity of the exported container, where required by the export protocol (e.g. iSCSI target, NFS directory);
* The domain of the protocol name server for the clients being served, where required by the export protocol;
* The list of who may mount that container via that protocol, as standardized by that protocol or optionally by leveraging the name mapping protocol (see :numref:`%s <ref_mapping_names>`) and specifying CDMI-resolvable user or groupnames;
* Required protocol-specific export parameters;
* Optional protocol-specific export parameters; and
* Export control parameters.

The ability to export containers via a specific protocol is determined by the presence or absence of a ``cdmi_export_<protocol>`` system wide capabilities, which are listed in :numref:`%s <ref_cloud_storage_system-wide_capabilities>`. The ability to export a specific container via a specific protocol is indicated by the ``cdmi_export_<protocol>`` capability.

Exports are represented as a JSON object having zero or more named protocol-specific exports.

The meaning, use, and permitted values for the fields associated with each export type are described later in this clause.

Container object export addressing
----------------------------------

Container object exports are addressed in CDMI in two ways:

* by name (e.g. ``https://cloud.example.com/cdmi/2.0.0/container/?exports``); and
* by ID (e.g. ``https://cloud.example.com/cdmi/2.0.0/cdmi_objectid/00007ED900104E1D14771DC67C27BF8B/?exports``).

See :numref:`%s <ref_cdmi_container_object_overview>` for more details on container object addressing.

Container object export fields
------------------------------

The export of a container, via data path protocols other than CDMI, is accomplished by creating or updating a container and supplying one or more export protocol structures, one for each such protocol. In this International standard, all such protocols are referred to as foreign protocols.

This International standard defines JSON export structures for several well known foreign protocols. All depend on the following user and groupname mapping feature in the case that multi-protocol access to the container is desired. However, name mapping is not required if an external domain is used, or if CDMI is used only to provision containers to be used exclusively by foreign protocols.

Implementations that support authenticated and authorized access to CDMI objects via both CDMI and foreign protocols need a way to support the setting of security on a per-object basis. The numerous methods of doing this include:

* Defining or adopting a security scheme and mapping all requests into that scheme. CDMI implementations that adopt this scheme shall use a name mapping technique to accomplish it, as (a) this mapping is easier for administrators to manage than straight id-to-id mapping, and (b) it is desired that interoperable CDMI implementations behave similarly in this respect. This means that the name of the principal in an incoming request is mapped to the name of a principal in the security domain, and that principal’s id is acquired and used in the authorization procedure.
* Allowing each protocol to set its own security, which implies that an object might be accessible to a given user via one protocol but not another.
* Using the security scheme of the last protocol that was used to set permissions on the object. This method also requires mapping the principal in the incoming request to a principal in the security domain of the object. As in the first case, the server shall use a name mapping procedure to obtain the id that is used to authorize the user against the desired object’s ACL.

CDMI does not mandate which method shall be used. It does, however, specify how users and groups shall be mapped between protocols.

.. _ref_mapping_names:

Mapping names from CDMI to another protocol
-------------------------------------------

Clients wishing to restrict exports via foreign protocols to mounting only by certain users and groups may be required to provide user and groupname mapping information to the server. This mapping information is also required if access to the container is desired by multiple protocols, e.g., both CDMI and NFS. The mapping is done as follows.

#. When a CDMI container is exported, the server should use the appropriate mechanism, e.g., Powershell ``WmiClass.Create( )`` on the Windows platform or ``/etc/exports`` on Unix, to limit permitted mounts of the share from other servers, as specified in the "``root_hosts``", "``rw_hosts``" and "``ro_hosts``" lines of the "``exports``" property. The syntax of each hosts line follows the syntax of ``/etc/exports`` in the Linux operating system, as encoded in a JSON string. If the CDMI server is unable to limit mounts as specified by each hosts line, an error shall result, but the success or failure of the operation depends on the implementation.
#. When possible, authentication credential resolution should be consistant across both CDMI and all exported protocols.
#. Authentication credential resolution shall be performed in the following order: 
   #. CDMI Domain membership mapping (See :numref:`%s <cdmi_domain_object_membership>`), 
   #. Delegated domain mapping (See :numref:`%s <cdmi_domain_object_membership>`), 
   #. Export name mapping.
#. Implementations may ignore or override export name mapping as requried to enforce implementation-specific security policies.
#. The usermap list for that protocol shall be searched, in order, for an entry matching the username obtained from the authentication credential resolution process (see :numref:`%s <ref_user_and_groupname_mapping_syntax_and_evaluation_rules>` for details on the search).
#. The CDMI principal name obtained from the first matching usermap entry during this search is then used to authorize the user request via the security mechanism of the protocol whose security governs access to the object.

Groupname mapping for each foreign protocol shall be specified in a ``groupname`` field of the foreign protocol export specification. Its syntax is identical to the syntax for the ``username`` field.

Administrative users
--------------------

By default, the following users shall be considered "``root``", or administrative users, and equivalent to each other: 

* root (Unix/NFS/LDAP),
* Administrator (Windows/AD/SMB), and 
* the domain owner (CDMI). 

Servers shall automatically map these users to the root user of the target protocol unless otherwise instructed by the usermaps. 

As an automatic mapping does not meet strict security standards, servers shall override these built-in entries with any usermap entries that apply to one or more root users. 

In the following example, root gets mapped to nobody, and everyone else is mapped to a user of the same name in the NFS domain and the CDMI domain.

EXAMPLE 1: NFS export user mapping

   .. code-block:: none

        PUT /cdmi/2.0.0/MyContainer HTTP/1.1
        Host: cloud.example.com
        Accept: application/vnd.org.snia.cdmi.container+json
        Content-Type: application/vnd.org.snia.cdmi.container+json

        {
            "exports": {
                "nfs": {
                    "usermap": [
                        [
                            "nobody",
                            "<-",
                            "root"
                        ],
                        [
                            "*",
                            "<-->",
                            "*"
                        ]
                    ]
                }
            }
        }

Mapping domains from CDMI to another protocol
---------------------------------------------

The internet domain name corresponding to each exported CDMI container shall be described in the "``domain``" element of the protocol export specification as a JSON-formatted string . If the "``domain``" element is not present in the protocol export specification, it shall be assumed the domain is the same as the server hosting the CDMI implementation.

.. _ref_permissions_mapping:

Permissions mapping
-------------------

Security authorizations and entitlements may not directly correspond across users, groups, file system protocols, operating systems, enterprises or different cloud provider environments. CDMI's primary area of concern is representing a rich set of network files system authorizations and entitlements in a CDMI Access Control List (ACL).

As there are a number of possible ways to coordinate the permissions/ACLs and CDMI ACLs, this International specification does not mandate a particular method. However, all mappings of user and groupnames between domains shall use the name mapping mechanism specified in :numref:`%s <ref_user_and_groupname_mapping_syntax_and_evaluation_rules>`.

.. _ref_user_and_groupname_mapping_syntax_and_evaluation_rules:

User and groupname mapping syntax and evaluation rules
------------------------------------------------------

A BNF-style grammar for name mapping is as follows:

.. code-block:: bnf

   name_mapping_list = protocol protocol mapping_list
   protocol = "cdmi" | "nfs" | "smb" | "ldap" 
   mapping_list = name mapping_operator name
   name = pattern | utf8_name | quoted_utf8_name
   quoted_utf8_name = " utf8_name "
   utf8_name = <any legal utf8 character sequence not including the characters ",',\,/,:,*,?>
   pattern =  <utf8_name> * | *
   mapping_operator = "<--" | "<-->" | "-->"

To restate this in English, a mapping entry consists of two names separated by a directional indicator. As most environments use the same usernames and groupnames across administrative domains, the most common mapping is "``* <--> *``", which maps any name to the same name in the foreign protocol domain, and vice versa. It is highly recommended that this be both the default map and the last entry on all more complex maps.

CDMI specifies pattern matching on names in the name map, but only prefix matching is required. The symbol "``*``" at the end of a character string shall match zero or more occurrences of any non-whitespace character.

Evaluation of the name mapping list shall proceed in order; once a match is made, evaluation shall cease and the result of the match shall be returned.

If no matches are found on the match list, the result is system dependent. However, it is recommended that servers either deny access altogether or map the user in question to the equivalent of "``anonymous``" on the destination protocol. It is also recommended that an entry be devoted to the special user "``EVERYONE@``".

.. _ref_nfs_exported_protocol:

NFS exported protocol
*********************

An NFS export specifes the information required by an NFS server to provide an NFS export. Normally, this information is contained in the ``/etc/exports`` file on a server or the equivalent.

Elements for an NFS export are described in :numref:`tbl_elements_of_the_nfs_protocol_structure`.

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.20}
                    |>{\raggedright\arraybackslash}\Y{0.10}
                    |>{\raggedright\arraybackslash}\Y{0.55}
                    |>{\raggedright\arraybackslash}\Y{0.15}|

.. _tbl_elements_of_the_nfs_protocol_structure:

.. list-table:: Elements of the NFS protocol export structure
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Element
      - Type
      - Description
      - Requirement
    * - ``type``
      - JSON String
      - The export type is set to "``NFS``"
      - Mandatory
    * - ``protocol``
      - JSON String
      - The protocol being requested. Values shall be "``NFSv3``", "``NFSv4``", "``NFSv4.1``", or any subsequent NFS version enshrined in an IETF RFC. Version 2 of NFS is not supported by CDMI.
      - Mandatory
    * - ``path``
      - JSON String
      - The pathname to which the export should be surfaced. This value shall be a UTF8 string of the form ``[<server>:]/<path>``, where the <server> component is optional, (e.g., "``myserver:/lessons/number1``"). If specified, the <server> component of the path must be obtained from an administrator of the service running the CDMI implementation.
      - Mandatory
    * - ``usermap``
      - JSON Array of JSON Arrays
      - Authentication credential mapping of user names, as specified in :numref:`%s <ref_mapping_names>`.
      - Mandatory
    * - ``groupmap``
      - JSON Array of JSON Arrays
      - Authentication credential mapping of group names, as specified in :numref:`%s <ref_mapping_names>`.
      - Mandatory
    * - ``encryption``
      - JSON String
      - This value shall be "``rpcsec_gss``" or future TLS-based transport security.
      - Optional
    * - ``domain_servers``
      - JSON Array of JSON Strings
      - A list of server names or IP addresses that function as name servers for the domain given in "``domain``". If given, this list shall override the names obtainable by the CDMI server via other programmatic means.
      - Optional
    * - ``mount_name``
      - JSON String
      - The name the client should use to surface the export. This name replaces the last name in the path string, (e.g., mounting "``myserver:/lessons/number1``" with a mountname of "``1``" over the directory ``/somepath/lessons/num1`` should result in a ``/somepath/lessons/1`` directory on the client).
      - Optional
    * - ``root_hosts``
      - JSON Array of JSON Strings
      - A list of names of hosts that can access the container in superuser mode. The default shall be an empty list.
      - Optional
    * - ``rw_hosts``
      - JSON Array of JSON Strings
      - A list of names of hosts that can access the container in ``rw`` mode. The default shall be an empty list.
      - Optional
    * - ``ro_hosts``
      - JSON Array of JSON Strings
      - A list of names of hosts that can access the container in ``ro`` mode only. The default shall be an empty list.
      - Optional
    * - ``recurse``
      - JSON String
      - This value shall be either "``true``" or "``false``". The default shall be "``true``". When true, recurse indicates that mounts within the CDMI directory structure (presumably put there by other NFS operations) shall be followed and the mounted directory exposed as though it were part of the CDMI container actually being exported. This parameter is equivalent to the Linux "``crossmnt``" parameter.
      - Optional
    * - ``parameters``
      - JSON String
      - A string containing NFS server-specific parameters to be passed to the NFS server. The format of this string is implementation specific. The default shall be an empty string.
      - Optional

Servers shall support wildcard matching on the "``*``" and "``?``" characters in the hosts lists, so that "``*.cs.uscs.edu``" matches all servers in the ``cs.ucsc.edu`` department.

Servers may also support IP address ranges in the various lists of hosts. These IP addresses shall be augmented by the same wildcard matching as is used for ordinary host names (e.g., "``192.168.1.*``" exports to all the machines on local class C network).

Servers shall return an HTTP status code of ``400 Bad Request`` when an export setting does not conform to an allowable setting on the server.

EXAMPLE 2: NFS exports

  .. code-block:: none

    {
        "exports" : {
            "1" : {
                "type" : "nfs",
                "protocol" : "NFSv4",
                "path" : "/myexport",
                "domain_servers" : "lab.example.com",
                "root_hosts" : [ "admin.lab.example.com" ],
                "ro_hosts" : [ "*.lab.example.com" ],
                "usermap" : [
                    { "jimsmith", "<-->", "jims" },
                    { "*", "<-->", "*" }
                ],
                "groupmap" : [
                    { "admins", "<-", "wheel" },
                    { "everyone", "<-", "*" }
                ]
            }
    }


.. _ref_smb_exported_protocol:

SMB exported protocol
**********************

An SMB export specifes the information required by an SMB server to provide an SMB export.

Elements for an SMB export are described in :numref:`tbl_elements_of_the_smb_protocol_structure` 

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.20}
                    |>{\raggedright\arraybackslash}\Y{0.10}
                    |>{\raggedright\arraybackslash}\Y{0.55}
                    |>{\raggedright\arraybackslash}\Y{0.15}|

.. _tbl_elements_of_the_smb_protocol_structure:

.. list-table:: Elements of the SMB protocol export structure
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Element
      - Type
      - Description
      - Requirement
    * - ``type``
      - JSON String
      - The export type is set to "``SMB``"
      - Mandatory
    * - ``sharename``
      - JSON String
      - The name that SMB shall use to discover the share.
      - Mandatory
    * - ``usermap``
      - JSON Array of JSON Arrays
      - Authentication credential mapping of user names, as specified in :numref:`%s <ref_mapping_names>`.
      - Mandatory
    * - ``groupmap``
      - JSON Array of JSON Arrays
      - Authentication credential mapping of group names, as specified in :numref:`%s <ref_mapping_names>`.
      - Mandatory
    * - ``root_hosts``
      - JSON Array of JSON Strings
      - A list of names of hosts that can access the container in superuser mode. The default shall be an empty list.
      - Optional
    * - ``rw_hosts``
      - JSON Array of JSON Strings
      - A list of names of hosts that can access the container in ``rw`` mode. The default shall be an empty list.
      - Optional
    * - ``ro_hosts``
      - JSON Array of JSON Strings
      - A list of names of hosts that can access the container in ``ro`` mode only. The default shall be an empty list.
      - Optional
    * - ``domain_servers``
      - JSON Array of JSON Strings
      - A list of server names or IP addresses that function as name servers for the domain given in "``domain``". If given, this list shall override the names obtainable by the CDMI server via other programmatic means.
      - Optional
    * - ``comment``
      - JSON String
      - This value shall be JSON String containing a user-friendly share name for the client.
      - Optional
    * - ``parameters``
      - JSON String
      - A string containing SMB server-specific parameters to be passed to the SMB server. The format of this string is implementation specific. The default shall be an empty string.
      - Optional

Servers shall return an HTTP status code of ``400 Bad Request`` when an export setting does not conform to an allowable setting on the server.

EXAMPLE 3: SMB exports

  .. code-block:: none

    {
        "exports" : {
            "1" : {
                "type" : "smb",
                "rw_hosts" : [ "*" ],
                "domain_servers" : "lab.mycollege.edu",
                "usermap" : [
                    { "jimsmith", "<-->", "james.smith" },
                    { "*", "<-->", "*" }
                ],
                "groupmap" : [
                    { "admins", "<-", "Administrators" },
                    { "everyone", "<-", "*" }
                ]
            }
        }
    }

iSCSI exported protocol
***********************

An iSCSI export specifes the information required by an iSCSI server (see RFC 7143 :cite:`rfc7143`) to provide an iSCSI export. Each container is exported as a single SCSI Logical Unit as a Logical Unit Number (LUN). One or more iSCSI initiators import the LUN through an iSCSI target node and port using one or more iSCSI network portals (IP addresses). 

Elements for an iSCSI export are described in :numref:`tbl_elements_of_the_iscsi_protocol_structure` 

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.20}
                    |>{\raggedright\arraybackslash}\Y{0.10}
                    |>{\raggedright\arraybackslash}\Y{0.55}
                    |>{\raggedright\arraybackslash}\Y{0.15}|

.. _tbl_elements_of_the_iSCSI_protocol_structure:

.. list-table:: Elements of the iSCSI protocol export structure
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Element
      - Type
      - Description
      - Requirement
    * - ``type``
      - JSON String
      - The export type is set to "``iSCSI``"
      - Mandatory
    * - ``permissions``
      - JSON Array of JSON Strings
      - One or more target identifiers for initiators that are permitted to access the iSCSI export. Target identifiers may be in ``iqn``, ``naa``, or ``eui`` format and shall have the target portal group tag appended in hexadecimal. If absent, any initiator can access the export.
      - Optional
    * - ``parameters``
      - JSON String
      - A string containing iSCSI server-specific parameters to be passed to the iSCSI server. The format of this string is implementation specific. The default shall be an empty string.
      - Optional
    * - ``target_identifier``
      - JSON String
      - iSCSI target information (IP addresses or fully qualified domain names, target identifier, and LUN)
      - Read-Only
    * - ``logical_unit_number``
      - JSON String
      - iSCSI Logical Unit Number
      - Read-Only
    * - ``logical_unit_name``
      - JSON String
      - iSCSI Logical Unit Name
      - Read-Only
    * - ``portals``
      - JSON Array of JSON Strings
      - One or more IP addresses or fully qualified domains names through which the iSCSI export can be accessed. This field is server populated.
      - Read-Only

Servers shall return an HTTP status code of ``400 Bad Request`` when an export setting does not conform to an allowable setting on the server.

EXAMPLE 4: iSCSI export creation

.. code-block:: none

    "exports" : 
    {
        "1" : {
            type: "iSCSI",
            "permissions": [
                "iqn.2010-01.com.acme:host1",
                "iqn.2010-01.com.acme:host2"
            ]
        }
    }

EXAMPLE 5: Reading iSCSI export information after creation

.. code-block:: none

    "exports" : 
    {
        "1" : {
            type: "iSCSI",
            "portals": [
                "192.168.1.101",
                "192.168.1.102"
            ],
            "target_identifier": "iqn.2010-01.com.cloudprovider:acmeroot.container1,t,0x0001",
            "logical_unit_number": "3",
            "logical_unit_name": "0x60012340000000000000000000000001",
            "permissions": [
                "iqn.2010-01.com.acme:host1",
                "iqn.2010-01.com.acme:host2"
            ]
        }
    } 


WebDAV exported protocol
************************

A WebDAV export specifes the information required by an WebDAV server (see RFC 4918 :cite:`rfc4918`) to provide an WebDAV export.

Elements for an WebDAV export are described in :numref:`tbl_elements_of_the_webdav_protocol_structure` 

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.20}
                    |>{\raggedright\arraybackslash}\Y{0.10}
                    |>{\raggedright\arraybackslash}\Y{0.55}
                    |>{\raggedright\arraybackslash}\Y{0.15}|

.. _tbl_elements_of_the_webdav_protocol_structure:

.. list-table:: Elements of the WebDAV protocol export structure
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Element
      - Type
      - Description
      - Requirement
    * - ``type``
      - JSON String
      - The export type is set to "``WebDAV``"
      - Mandatory
    * - ``usermap``
      - JSON Array of JSON Arrays
      - Authentication credential mapping of user names, as specified in :numref:`%s <ref_mapping_names>`.
      - Mandatory
    * - ``groupmap``
      - JSON Array of JSON Arrays
      - Authentication credential mapping of group names, as specified in :numref:`%s <ref_mapping_names>`.
      - Mandatory
    * - ``parameters``
      - JSON String
      - A string containing WebDAV server-specific parameters to be passed to the WebDAV server. The format of this string is implementation specific. The default shall be an empty string.
      - Optional

Servers shall return an HTTP status code of ``400 Bad Request`` when an export setting does not conform to an allowable setting on the server.

WebDAV supports locking, but it is up to implementations to support any locking of access through CDMI as a result, and the interaction between the two protocols is purposely not described in this International Standard. 

EXAMPLE 6: WebDAV export

   .. code-block:: none

    "exports" : 
    {
        "1" : {
            type: "WebDAV",
            "usermap" : [
                { "*", "<-->", "*" }
            ],
            "groupmap" : [
                { "*", "<-->", "*" }
            ]
        }
    }

.. _ref_occi_exported_protocol:

OCCI exported protocol
**********************

Container objects can be exported via multiple protocols. This is especially useful when CDMI is being used as a storage interface in a cloud computing environement, as illustrated in  :numref:`fig_cdmi_and_occi_in_an_integrated_cloud_computing_environment` below.

.. _fig_cdmi_and_occi_in_an_integrated_cloud_computing_environment:

.. figure:: /images/cdmi_exports_occi.pdf
    :align:  center
    :figwidth: 100%
   
    CDMI and OCCI in an integrated cloud computing environment

In this example, CDMI containers may also be used as virtual disks by virtual machines in the cloud computing environement. The cloud computing infrastructure management is shown as implementing both an Open Cloud Computer Interface (OCCI) and CDMI interfaces. With the internal knowledge of the network and the virtual machine manager's mapping of drives, this infrastructure may associate the CDMI containers to the guests using the appropriate exported protocol. 

To support exported protocols and improve their interoperability with CDMI, CDMI provides a type of exported protocol that contains information obtained via the OCCI interface. In addition, OCCI provides a type of storage that corresponds to a CDMI container that is exported with a specific type of protocol used by OCCI. A client of both interfaces performs operations that align the architectures, including the following:

* The client creates a CDMI container through the CDMI interface and exports it as an OCCI export protocol type. The CDMI container object ID is returned as a result.
* The client creates a virtual machine through the OCCI interface and attaches a storage volume of type CDMI using the object ID and protocol type. The OCCI virtual machine ID is returned as a result.
* The client updates the export protocol structure of the CDMI container object with the OCCI virtual machine ID to allow the virtual machine access to the container.
* The client starts the virtual machine through the OCCI interface.

CDMI defines an export protocol structure for the Open Cloud Computing Interface (:numref:`%s <ref_occi_exported_protocol>`) as follows:

* The type is "``OCCI/<protocol standard>``" (e.g., "``OCCI/NFSv4``").
* The identifier is the CDMI container ID.
* A JSON array of URIs to OCCI compute resources shall have access (permissions) to the exported container.

EXAMPLE 5: OCCI export

   .. code-block:: none
   
    "OCCI/iSCSI": 
        {
        "identifier": "00007E7F00104BE66AB53A9572F9F51E",
        "permissions": 
            [
                "https://example.com/compute/0/",
                "https://example.com/compute/1/"
            ]
        }

For more detail on using the OCCI export protocol structure attributes, see :numref:`%s <ref_exports_overview>`. Because the actual networking and access control is under the control of a hidden, common infrastructure that implements both OCCI and CDMI, the normal permission structure shall not be provided.


