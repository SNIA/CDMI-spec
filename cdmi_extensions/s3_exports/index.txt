CDMI Extension
==============

S3 Exports CDMI Extension
*************************

Overview
--------

The existing CDMI specification permits CDMI containers to be declaratively exported via network protocols such as NFS, CIFS and iSCSI. As S3 protocol access to objects has become widely used, the same "exports" facility can be extended to support exporting a CDMI container as an S3 bucket to allow S3 clients to transparently access data stored on a storage system managed using CDMI.

This extension proposes a new export protocol type of "s3", along with export parameters necessary for specifying how the contents of a container are mapped to an S3 bucket. This extension also includes required changes to permit mapping of allowable names, handing for directories that contain a value, and values that contain a directory.

Instructions to the Editor
--------------------------

To merge this extension into the CDMI 2.0.0 specification, make the following changes:

terms.txt
^^^^^^^^^

Insert into preamble/terms.txt, as follows:

.. glossary::

    x.1
    S3 bucket
         |br| a distinctly named logical grouping of objects made available using the S3 protocol |br|

    x.2
    S3 bucket properties
         |br| behavioural settings associated with an S3 bucket. |br|

    x.3
    S3 protocol
         |br| a widely used proprietary object storage protocol developed by Amazon and used by the S3 "Simple Storage Service" |br|



cdmi_capability_object.txt
^^^^^^^^^^^^^^^^^^^^^^^^^^

Add an entry to the end of the table starting on line 135 of cdmi_advanced/cdmi_capability_object.txt, as follows:

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.35}
                    |>{\raggedright\arraybackslash}\Y{0.15}
                    |>{\raggedright\arraybackslash}\Y{0.50}|

.. _tbl_system_wide_capabilities:

.. list-table:: System-wide capabilities
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Capability name    
      - Type    
      - Definition
    * - ``cdmi_export_s3``
      - JSON string    
      - If present and "``true``", the CDMI server supports S3 exports.
    * - ``cdmi_containers``
      - JSON string    
      - If present and ``true``", the CDMI server supports container objects.
    * - ``cdmi_dataobjects_as_`` :math:`\newline\color{red}\hookrightarrow` ``containers``
      - JSON string    
      - If present and ``true``", the CDMI server supports accessing data objects as container objects.
    * - ``cdmi_containers_as_`` :math:`\newline\color{red}\hookrightarrow` ``dataobjects``
      - JSON string    
      - If present and ``true``", the CDMI server supports accessing container objects as data objects.


Add an entry to the end of the table starting on line 612 of cdmi_advanced/cdmi_capability_object.txt, as follows:

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.35}
                    |>{\raggedright\arraybackslash}\Y{0.15}
                    |>{\raggedright\arraybackslash}\Y{0.50}|

.. _tbl_capabilities_for_data_objects:

.. list-table:: Capabilities for data objects
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Capability name    
      - Type    
      - Definition
    * - ``cdmi_as_container``
      - JSON string    
      - If present and "``true``", this capability indicates that the CDMI server shall support the ability to access the data object as a container.


Add an entry to the end of the table starting on line 668 of cdmi_advanced/cdmi_capability_object.txt, as follows:

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.35}
                    |>{\raggedright\arraybackslash}\Y{0.15}
                    |>{\raggedright\arraybackslash}\Y{0.50}|

.. _tbl_capabilities_for_containers:

.. list-table:: Capabilities for container objects
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Capability name    
      - Type    
      - Definition
    * - ``cdmi_as_dataobject``
      - JSON string    
      - If present and "``true``", this capability indicates that the CDMI server shall support the ability to access the container as a data object.



http_container_object/read.txt
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

7.3 Read a container object using HTTP
--------------------------------------

Replace the first paragraph with:

Reading a container object using HTTP is only defined if a data object representation exists for that container. If this is the case, the process described in clause 6.3. If a data object representation does not exist for the container, a server is allowed to return an error response, or to implement custom responses such as an Apache directory listing or an S3-style bucket listing.


cdmi_data_object/overview.txt
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

8.2.7 Data object representations
---------------------------------

Add new paragraph to end of section:

If the ``cdmi_dataobjects_as_containers`` capability is supported by the CDMI server and the ``cdmi_as_container`` capability is present for the data object, CDMI servers shall return a container object representations of a data object when created updated or requested by specifying a ``Content-Type`` and/or ``Accept`` header the vaue of ``application/cdmi-container``. The CDMI server shall also support the creation, modification and access to child objects by URI under any data object.


cdmi_container_object/overview.txt
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

9.2.6 Container object representations
---------------------------------

Add new paragraph to end of section:

If the ``cdmi_containers_as_dataobjects`` capability is supported by the CDMI server and the ``cdmi_as_dataobject`` capability is present for the container object, CDMI servers shall return a data object representations of a container object when created updated or requested by specifying a ``Content-Type`` and/or ``Accept`` header the vaue of ``application/cdmi-container``. The CDMI server shall also support storing and accessing a value associated with a container object.



cdmi_exports.txt
^^^^^^^^^^^^^^^^

13.1 Overview
-------------

Add "S3 Bucket" to the end of the example list at the end of the second bullet.


13.2.2 Container object export fields
-------------------------------------

Replace "ACL" with "CDMI ACL" at the end of the third bullet.

.. _ref_s3_exported_protocol:

13.8 S3 exported protocol
-------------------------

Add new section, with the following text:

An S3 export specifies the information required by an S3 server to provide S3 protocol access to a bucket.

Elements for an S3 export are described in :numref:`tbl_elements_of_the_s3_protocol_structure`.

.. tabularcolumns:: |>{\raggedright\arraybackslash}\Y{0.20}
                    |>{\raggedright\arraybackslash}\Y{0.10}
                    |>{\raggedright\arraybackslash}\Y{0.55}
                    |>{\raggedright\arraybackslash}\Y{0.15}|

.. _tbl_elements_of_the_s3_protocol_structure:

.. list-table:: Elements of the S3 protocol export structure
    :class: longtable
    :header-rows: 1
    :align: center 

    * - Element
      - Type
      - Description
      - Requirement
    * - ``type``
      - JSON String
      - The export type is set to "``s3``"
      - Mandatory
    * - ``bucketname``
      - JSON String
      - The name of the bucket into which the container should be exported. This value shall be between 3 and 63 characters in length, and shall only include lowercase ASCII letters [a-z], ASCII numbers [0-9], non-consecutive repeating periods ("``.``") and non-consecutive repeating hyphens ("``-``").
      - Mandatory
    * - ``read_only``
      - JSON String
      - This value shall be either "``true``" or "``false``". The default shall be "``false``". When true, no modifications will be permitted to be made through the S3 protocol. If not present, the default value shall be used.
      - Optional
    * - ``public``
      - JSON String
      - This value shall be either "``true``" or "``false``". The default shall be "``false``". When true, no access control checks will be performed for operations performed using the S3 protocol. If not present, the default value shall be used.
      - Optional

EXAMPLE 6: S3 exports

  .. code-block:: none

    {
        "exports" : {
            "1" : {
                "type" : "s3",
                "bucket" : "mybucket",
                "read_only" : "true"
            }
        }
    }
